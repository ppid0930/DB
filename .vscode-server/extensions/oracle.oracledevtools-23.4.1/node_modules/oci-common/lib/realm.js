"use strict";
/**
 * Copyright (c) 2020, 2021 Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Realm = void 0;
const developertoolconfiguration_1 = require("./developertoolconfiguration");
class Realm {
    constructor(realmId, secondLevelDomain, isDeveloperToolConfigurationRealm = false) {
        this._secondLevelDomain = secondLevelDomain;
        this._realmId = realmId;
        if (isDeveloperToolConfigurationRealm) {
            Realm.DEVELOPER_TOOL_CONFIGURATION_REALMS.set(realmId, this);
        }
        else {
            Realm.KNOWN_REALMS.set(realmId, this);
        }
    }
    get secondLevelDomain() {
        return this._secondLevelDomain;
    }
    get realmId() {
        return this._realmId;
    }
    static values() {
        if (developertoolconfiguration_1.useOnlyDeveloperToolConfigurationRegions()) {
            return Array.from(this.DEVELOPER_TOOL_CONFIGURATION_REALMS.values());
        }
        var allowedRealms = Array.from(this.KNOWN_REALMS.values());
        allowedRealms.concat(Array.from(this.DEVELOPER_TOOL_CONFIGURATION_REALMS.values()));
        return allowedRealms;
    }
    static register(realmId, secondLevelDomain, isDeveloperToolConfigurationRealm = false) {
        if (!realmId)
            throw Error("Realm Id can not be empty or undefined");
        if (!secondLevelDomain)
            throw Error("secondLevelDomain can not be empty or undefined");
        realmId = realmId.trim().toLocaleLowerCase("en-US");
        secondLevelDomain = secondLevelDomain.trim().toLocaleLowerCase("en-US");
        const realm = isDeveloperToolConfigurationRealm
            ? Realm.DEVELOPER_TOOL_CONFIGURATION_REALMS.get(realmId)
            : Realm.KNOWN_REALMS.get(realmId);
        if (realm) {
            if (realm.secondLevelDomain !== secondLevelDomain) {
                throw Error("RealmId " +
                    realmId +
                    " is already registered with  " +
                    realm.secondLevelDomain +
                    " It cannot be re-registered with a different secondLevelDomain");
            }
            return realm;
        }
        return new Realm(realmId, secondLevelDomain, isDeveloperToolConfigurationRealm);
    }
    static resetDeveloperToolConfiguration() {
        Realm.DEVELOPER_TOOL_CONFIGURATION_REALMS.clear();
    }
}
exports.Realm = Realm;
Realm.KNOWN_REALMS = new Map();
Realm.DEVELOPER_TOOL_CONFIGURATION_REALMS = new Map();
Realm.OC1 = Realm.register("oc1", "oraclecloud.com");
Realm.OC2 = Realm.register("oc2", "oraclegovcloud.com");
Realm.OC3 = Realm.register("oc3", "oraclegovcloud.com");
Realm.OC4 = Realm.register("oc4", "oraclegovcloud.uk");
Realm.OC8 = Realm.register("oc8", "oraclecloud8.com");
Realm.OC9 = Realm.register("oc9", "oraclecloud9.com");
Realm.OC10 = Realm.register("oc10", "oraclecloud10.com");
Realm.OC14 = Realm.register("oc14", "oraclecloud14.com");
Realm.OC20 = Realm.register("oc20", "oraclecloud20.com");
Realm.OC19 = Realm.register("oc19", "oraclecloud.eu");
Realm.OC24 = Realm.register("oc24", "oraclecloud24.com");
Realm.OC21 = Realm.register("oc21", "oraclecloud21.com");
Realm.OC26 = Realm.register("oc26", "oraclecloud26.com");
Realm.OC15 = Realm.register("oc15", "oraclecloud15.com");
//# sourceMappingURL=realm.js.map