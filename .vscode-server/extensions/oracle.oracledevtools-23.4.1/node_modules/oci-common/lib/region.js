"use strict";
/**
 * Copyright (c) 2020, 2021 Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Region = void 0;
const realm_1 = require("./realm");
const config_file_reader_1 = require("./config-file-reader");
const fs_1 = require("fs");
const region_metadata_schema_1 = require("./region-metadata-schema");
const http_1 = require("./http");
const developerToolConfiguration = __importStar(require("./developertoolconfiguration"));
const log_1 = require("./log");
class Region {
    constructor(regionId, realm, regionCode, isDeveloperToolConfigurationRegion = false) {
        this._realm = realm;
        this._regionId = regionId;
        if (regionCode)
            this._regionCode = regionCode;
        developerToolConfiguration.developerToolConfiguration();
        if (isDeveloperToolConfigurationRegion) {
            Region.DEVELOPER_TOOL_CONFIGURATION_REGIONS.set(regionId, this);
        }
        else {
            Region.KNOWN_REGIONS.set(regionId, this);
        }
    }
    get realm() {
        return this._realm;
    }
    get regionId() {
        return this._regionId;
    }
    get regionCode() {
        return this._regionCode;
    }
    /**
   * Return all known Regions in this version of the SDK, except possibly the region returned by IMDS (Instance Metadata
   * Service, only available on OCI instances), since IMDS is not automatically contacted by this method.
   *
   * To ensure that this method also returns the region provided by IMDS, call {@link Region#enableInstanceMetadata()}
   * explicitly before calling {@link Region#values()}.
   *
   */
    static values() {
        if (!Region.hasCalledForImds && !Region.hasWarnedAboutValuesWithoutInstanceMetadataService) {
            if (log_1.LOG.logger)
                log_1.LOG.logger.info("Call to Regions.values() without having contacted IMDS (Instance Metadata Service, only available on OCI instances); if you do need the region from IMDS, call Region.enableInstanceMetadata() before calling Region.values()");
            Region.hasWarnedAboutValuesWithoutInstanceMetadataService = true;
        }
        Region.registerAllRegions();
        if (developerToolConfiguration.useOnlyDeveloperToolConfigurationRegions()) {
            return Array.from(this.DEVELOPER_TOOL_CONFIGURATION_REGIONS.values());
        }
        var allowedRegions = Array.from(this.KNOWN_REGIONS.values());
        allowedRegions.concat(Array.from(this.DEVELOPER_TOOL_CONFIGURATION_REGIONS.values()));
        return allowedRegions;
    }
    /**
   *  Register all regions and sets status
   */
    static registerAllRegions() {
        if (!Region._hasUsedDeveloperToolConfigFile) {
            Region.addRegionsFromDeveloperToolConfigFile();
        }
        if (!Region._hasUsedConfigFile) {
            Region.addRegionsFromConfigFile();
        }
        if (!Region.hasUsedEnvVar) {
            Region.addRegionFromEnvVar();
        }
    }
    static fromRegionId(regionId) {
        /*
         * load provided region from already registered regions if it exists
         * else load provided region from region configuration file if it exists
         * else load provided region from region metadeta environment variable
         * else if instance metadeta service (IMDS) has been opted in, try loading region from IMDS
         */
        if (!regionId)
            throw Error("RegionId can not be empty or undefined");
        regionId = regionId.trim().toLocaleLowerCase("en-US");
        if (!this._hasUsedDeveloperToolConfigFile && developerToolConfiguration.doesDeveloperToolConfigurationFileExist()) {
            Region.addRegionsFromDeveloperToolConfigFile();
            let foundRegion = Region.DEVELOPER_TOOL_CONFIGURATION_REGIONS.get(regionId);
            if (foundRegion)
                return foundRegion;
        }
        let foundRegion = Region.KNOWN_REGIONS.get(regionId);
        if (!foundRegion) {
            Region.addRegionsFromConfigFile();
            foundRegion = Region.KNOWN_REGIONS.get(regionId);
        }
        if (!foundRegion) {
            Region.addRegionFromEnvVar();
            foundRegion = Region.KNOWN_REGIONS.get(regionId);
        }
        if (!foundRegion && Region.hasCalledForImds) {
            Region.addRegionFromImds();
            foundRegion = Region.KNOWN_REGIONS.get(regionId);
        }
        return foundRegion;
    }
    // Adds regions from the alloy config file
    static addRegionsFromDeveloperToolConfigFile() {
        if (!Region._hasUsedDeveloperToolConfigFile) {
            Region._hasUsedDeveloperToolConfigFile = true;
            const expandedRegionConfigFilePath = config_file_reader_1.ConfigFileReader.expandUserHome(developerToolConfiguration.getDeveloperToolConfigurationFilePath());
            if (config_file_reader_1.ConfigFileReader.fileExists(expandedRegionConfigFilePath)) {
                try {
                    const fileContent = fs_1.readFileSync(expandedRegionConfigFilePath, "utf8");
                    const regionMetadata = JSON.parse(fileContent);
                    if (regionMetadata && regionMetadata.length > 0 && Array.isArray(regionMetadata)) {
                        regionMetadata.map(metadata => {
                            if (region_metadata_schema_1.RegionMetadataSchema.isValidSchema(metadata)) {
                                Region.register(metadata.regionIdentifier, realm_1.Realm.register(metadata.realmKey, metadata.realmDomainComponent), metadata.regionKey, true);
                            }
                        });
                    }
                }
                catch (error) {
                    if (log_1.LOG.logger)
                        log_1.LOG.logger.error("error reading or parsing region developertoolConfiguration file");
                }
            }
        }
    }
    // Adds regions from the config file
    static addRegionsFromConfigFile() {
        if (!Region._hasUsedConfigFile) {
            Region._hasUsedConfigFile = true;
            const expandedRegionConfigFilePath = config_file_reader_1.ConfigFileReader.expandUserHome(Region.REGIONS_CONFIG_FILE_PATH);
            if (config_file_reader_1.ConfigFileReader.fileExists(expandedRegionConfigFilePath)) {
                try {
                    const fileContent = fs_1.readFileSync(expandedRegionConfigFilePath, "utf8");
                    const regionMetadata = JSON.parse(fileContent);
                    if (regionMetadata && regionMetadata.length > 0 && Array.isArray(regionMetadata)) {
                        regionMetadata.map(metadata => {
                            if (region_metadata_schema_1.RegionMetadataSchema.isValidSchema(metadata)) {
                                Region.register(metadata.regionIdentifier, realm_1.Realm.register(metadata.realmKey, metadata.realmDomainComponent), metadata.regionKey);
                            }
                        });
                    }
                }
                catch (error) {
                    if (log_1.LOG.logger)
                        log_1.LOG.logger.error("error reading or parsing region config file");
                }
            }
        }
    }
    // Adds region from the environment variable
    static addRegionFromEnvVar() {
        if (!Region.hasUsedEnvVar) {
            Region.hasUsedEnvVar = true;
            const envVarRegionMetadata = process.env[Region.OCI_REGION_METADATA_ENV_VAR];
            if (envVarRegionMetadata) {
                try {
                    const regionMetadata = JSON.parse(envVarRegionMetadata);
                    if (region_metadata_schema_1.RegionMetadataSchema.isValidSchema(regionMetadata)) {
                        Region.register(regionMetadata.regionIdentifier, realm_1.Realm.register(regionMetadata.realmKey, regionMetadata.realmDomainComponent), regionMetadata.regionKey);
                    }
                }
                catch (error) {
                    if (log_1.LOG.logger)
                        log_1.LOG.logger.error("error reading or parsing region metadata env var config file");
                }
            }
        }
    }
    // Add region from the Instance Metadata Service
    static addRegionFromImds() {
        if (Region.imdsRegionMetadata) {
            Region.register(Region.imdsRegionMetadata.regionIdentifier, realm_1.Realm.register(Region.imdsRegionMetadata.realmKey, Region.imdsRegionMetadata.realmDomainComponent), Region.imdsRegionMetadata.regionKey);
            Region.imdsRegionMetadata = undefined;
        }
    }
    /*
   * Enable instance metadata lookup for region info
   */
    static enableInstanceMetadata() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Region.hasCalledForImds) {
                Region.hasCalledForImds = true;
                try {
                    const url = Region.IMDS_BASE_URL + "instance/regionInfo/";
                    const headers = new Headers();
                    headers.append(Region.CONTENT_TYPE_HEADER, Region.CONTENT_TYPE_HEADER_VALUE);
                    headers.append(Region.AUTHORIZATION, Region.METADATA_AUTH_HEADERS);
                    const httpClient = new http_1.FetchHttpClient(null);
                    const response = yield httpClient.send({
                        uri: url,
                        method: "GET",
                        headers: headers
                    });
                    const regionMetadata = (yield response.json());
                    if (region_metadata_schema_1.RegionMetadataSchema.isValidSchema(regionMetadata)) {
                        Region.imdsRegionMetadata = regionMetadata;
                    }
                }
                catch (error) {
                    if (log_1.LOG.logger)
                        log_1.LOG.logger.error("Unable to retrieve region metadata from instance metadata service, reason :" + error);
                }
            }
        });
    }
    static register(regionId, realm, regionCode, isDeveloperToolConfigurationRegion = false) {
        if (!regionId)
            throw Error("RegionId can not be empty or undefined");
        regionId = regionId.trim().toLocaleLowerCase("en-US");
        const region = isDeveloperToolConfigurationRegion ? Region.DEVELOPER_TOOL_CONFIGURATION_REGIONS.get(regionId) : Region.KNOWN_REGIONS.get(regionId);
        if (region) {
            if (region.realm.secondLevelDomain !== realm.secondLevelDomain) {
                throw Error(" Region " +
                    regionId +
                    " is already associated with another Realm " +
                    region.realm +
                    " It cannot be re-registered with a different realm.");
            }
            return region;
        }
        if (regionCode) {
            regionCode = regionCode.trim().toLocaleLowerCase("en-US");
        }
        return new Region(regionId, realm, regionCode, isDeveloperToolConfigurationRegion);
    }
    /**
   * Function to get regionId based regionStr: regionStr can be a short code or regionId
   * if it is a shortCode then we want to return the corresponding regionId
   * @param regionStr
   * @return regionId
   */
    static getRegionIdFromShortCode(regionStr) {
        regionStr = regionStr.toLocaleLowerCase();
        let region = Region.values().find(r => r.regionCode === regionStr);
        if (region) {
            return region.regionId;
        }
        // If region short code is not found in the SDK, add regions from the regions config file
        Region.addRegionsFromConfigFile();
        region = Region.values().find(r => r.regionCode === regionStr);
        if (region) {
            return region.regionId;
        }
        // else add region from environment variable, and then check for short code
        region = Region.values().find(r => r.regionCode === regionStr);
        if (region) {
            return region.regionId;
        }
        // else add region from IMDS if it has been opted in, and then check for short code
        Region.addRegionFromImds();
        region = Region.values().find(r => r.regionCode === regionStr);
        if (region) {
            return region.regionId;
        }
        // else add regions from the regions alloy config file
        Region.addRegionsFromDeveloperToolConfigFile();
        region = Region.values().find(r => r.regionCode === regionStr);
        if (region) {
            return region.regionId;
        }
        return regionStr;
    }
    static set hasUsedConfigFile(bool) {
        Region._hasUsedConfigFile = bool;
    }
    static set hasUsedDeveloperToolConfigFile(bool) {
        Region._hasUsedDeveloperToolConfigFile = bool;
    }
    static resetDeveloperToolConfiguration() {
        this._hasUsedDeveloperToolConfigFile = false;
        Region.DEVELOPER_TOOL_CONFIGURATION_REGIONS.clear();
    }
}
exports.Region = Region;
Region.KNOWN_REGIONS = new Map();
Region.DEVELOPER_TOOL_CONFIGURATION_REGIONS = new Map();
Region.hasCalledForImds = false;
Region._hasUsedConfigFile = false;
Region._hasUsedDeveloperToolConfigFile = false;
Region.hasUsedEnvVar = false;
Region.hasWarnedAboutValuesWithoutInstanceMetadataService = false;
Region.REGIONS_CONFIG_FILE_PATH = "~/.oci/regions-config.json";
Region.OCI_REGION_METADATA_ENV_VAR = "OCI_REGION_METADATA";
Region.IMDS_BASE_URL = "http://169.254.169.254/opc/v2/";
Region.METADATA_AUTH_HEADERS = "Bearer Oracle";
Region.AUTHORIZATION = "Authorization";
Region.CONTENT_TYPE_HEADER = "Content-Type";
Region.CONTENT_TYPE_HEADER_VALUE = "application/json";
Region.REGION_ID_STRING = "regionId";
Region.REGION_STRING = "region";
// OC1
Region.AP_CHUNCHEON_1 = Region.register("ap-chuncheon-1", realm_1.Realm.OC1, "yny");
Region.AP_MUMBAI_1 = Region.register("ap-mumbai-1", realm_1.Realm.OC1, "bom");
Region.AP_HYDERABAD_1 = Region.register("ap-hyderabad-1", realm_1.Realm.OC1, "hyd");
Region.AP_SEOUL_1 = Region.register("ap-seoul-1", realm_1.Realm.OC1, "icn");
Region.AP_SYDNEY_1 = Region.register("ap-sydney-1", realm_1.Realm.OC1, "syd");
Region.AP_MELBOURNE_1 = Region.register("ap-melbourne-1", realm_1.Realm.OC1, "mel");
Region.AP_OSAKA_1 = Region.register("ap-osaka-1", realm_1.Realm.OC1, "kix");
Region.AP_TOKYO_1 = Region.register("ap-tokyo-1", realm_1.Realm.OC1, "nrt");
Region.CA_MONTREAL_1 = Region.register("ca-montreal-1", realm_1.Realm.OC1, "yul");
Region.CA_TORONTO_1 = Region.register("ca-toronto-1", realm_1.Realm.OC1, "yyz");
Region.EU_FRANKFURT_1 = Region.register("eu-frankfurt-1", realm_1.Realm.OC1, "fra");
Region.EU_ZURICH_1 = Region.register("eu-zurich-1", realm_1.Realm.OC1, "zrh");
Region.SA_SAOPAULO_1 = Region.register("sa-saopaulo-1", realm_1.Realm.OC1, "gru");
Region.UK_CARDIFF_1 = Region.register("uk-cardiff-1", realm_1.Realm.OC1, "cwl");
Region.UK_LONDON_1 = Region.register("uk-london-1", realm_1.Realm.OC1, "lhr");
Region.US_ASHBURN_1 = Region.register("us-ashburn-1", realm_1.Realm.OC1, "iad");
Region.US_PHOENIX_1 = Region.register("us-phoenix-1", realm_1.Realm.OC1, "phx");
Region.EU_AMSTERDAM_1 = Region.register("eu-amsterdam-1", realm_1.Realm.OC1, "ams");
Region.ME_JEDDAH_1 = Region.register("me-jeddah-1", realm_1.Realm.OC1, "jed");
Region.US_SANJOSE_1 = Region.register("us-sanjose-1", realm_1.Realm.OC1, "sjc");
Region.ME_DUBAI_1 = Region.register("me-dubai-1", realm_1.Realm.OC1, "dxb");
Region.SA_SANTIAGO_1 = Region.register("sa-santiago-1", realm_1.Realm.OC1, "scl");
Region.SA_VINHEDO_1 = Region.register("sa-vinhedo-1", realm_1.Realm.OC1, "vcp");
Region.IL_JERUSALEM_1 = Region.register("il-jerusalem-1", realm_1.Realm.OC1, "mtz");
Region.EU_MARSEILLE_1 = Region.register("eu-marseille-1", realm_1.Realm.OC1, "mrs");
Region.AP_SINGAPORE_1 = Region.register("ap-singapore-1", realm_1.Realm.OC1, "sin");
Region.ME_ABUDHABI_1 = Region.register("me-abudhabi-1", realm_1.Realm.OC1, "auh");
Region.EU_MILAN_1 = Region.register("eu-milan-1", realm_1.Realm.OC1, "lin");
Region.EU_STOCKHOLM_1 = Region.register("eu-stockholm-1", realm_1.Realm.OC1, "arn");
Region.AF_JOHANNESBURG_1 = Region.register("af-johannesburg-1", realm_1.Realm.OC1, "jnb");
Region.EU_PARIS_1 = Region.register("eu-paris-1", realm_1.Realm.OC1, "cdg");
Region.MX_QUERETARO_1 = Region.register("mx-queretaro-1", realm_1.Realm.OC1, "qro");
Region.EU_MADRID_1 = Region.register("eu-madrid-1", realm_1.Realm.OC1, "mad");
Region.US_CHICAGO_1 = Region.register("us-chicago-1", realm_1.Realm.OC1, "ord");
Region.MX_MONTERREY_1 = Region.register("mx-monterrey-1", realm_1.Realm.OC1, "mty");
Region.US_SALTLAKE_2 = Region.register("us-saltlake-2", realm_1.Realm.OC1, "aga");
Region.SA_BOGOTA_1 = Region.register("sa-bogota-1", realm_1.Realm.OC1, "bog");
Region.SA_VALPARAISO_1 = Region.register("sa-valparaiso-1", realm_1.Realm.OC1, "vap");
// OC2
Region.US_LANGLEY_1 = Region.register("us-langley-1", realm_1.Realm.OC2, "lfi");
Region.US_LUKE_1 = Region.register("us-luke-1", realm_1.Realm.OC2, "luf");
// OC3
Region.US_GOV_ASHBURN_1 = Region.register("us-gov-ashburn-1", realm_1.Realm.OC3, "ric");
Region.US_GOV_CHICAGO_1 = Region.register("us-gov-chicago-1", realm_1.Realm.OC3, "pia");
Region.US_GOV_PHOENIX_1 = Region.register("us-gov-phoenix-1", realm_1.Realm.OC3, "tus");
// OC4
Region.UK_GOV_LONDON_1 = Region.register("uk-gov-london-1", realm_1.Realm.OC4, "ltn");
Region.UK_GOV_CARDIFF_1 = Region.register("uk-gov-cardiff-1", realm_1.Realm.OC4, "brs");
// OC8
Region.AP_CHIYODA_1 = Region.register("ap-chiyoda-1", realm_1.Realm.OC8, "nja");
Region.AP_IBARAKI_1 = Region.register("ap-ibaraki-1", realm_1.Realm.OC8, "ukb");
// OC9
Region.ME_DCC_MUSCAT_1 = Region.register("me-dcc-muscat-1", realm_1.Realm.OC9, "mct");
// OC10
Region.AP_DCC_CANBERRA_1 = Region.register("ap-dcc-canberra-1", realm_1.Realm.OC10, "wga");
// OC14
Region.EU_DCC_MILAN_1 = Region.register("eu-dcc-milan-1", realm_1.Realm.OC14, "bgy");
Region.EU_DCC_MILAN_2 = Region.register("eu-dcc-milan-2", realm_1.Realm.OC14, "mxp");
Region.EU_DCC_DUBLIN_2 = Region.register("eu-dcc-dublin-2", realm_1.Realm.OC14, "snn");
Region.EU_DCC_RATING_2 = Region.register("eu-dcc-rating-2", realm_1.Realm.OC14, "dtm");
Region.EU_DCC_RATING_1 = Region.register("eu-dcc-rating-1", realm_1.Realm.OC14, "dus");
Region.EU_DCC_DUBLIN_1 = Region.register("eu-dcc-dublin-1", realm_1.Realm.OC14, "ork");
// OC20
Region.EU_JOVANOVAC_1 = Region.register("eu-jovanovac-1", realm_1.Realm.OC20, "beg");
// OC19
Region.EU_MADRID_2 = Region.register("eu-madrid-2", realm_1.Realm.OC19, "vll");
Region.EU_FRANKFURT_2 = Region.register("eu-frankfurt-2", realm_1.Realm.OC19, "str");
// OC24
Region.EU_DCC_ZURICH_1 = Region.register("eu-dcc-zurich-1", realm_1.Realm.OC24, "avz");
// OC21
Region.ME_DCC_DOHA_1 = Region.register("me-dcc-doha-1", realm_1.Realm.OC21, "doh");
// OC26
Region.ME_ABUDHABI_3 = Region.register("me-abudhabi-3", realm_1.Realm.OC26, "ahu");
// OC15
Region.AP_DCC_GAZIPUR_1 = Region.register("ap-dcc-gazipur-1", realm_1.Realm.OC15, "dac");
//# sourceMappingURL=region.js.map