/**
 * Core Services API
 * Use the Core Services API to manage resources such as virtual cloud networks (VCNs),
compute instances, and block storage volumes. For more information, see the console
documentation for the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services.
The required permissions are documented in the
[Details for the Core Services](/iaas/Content/Identity/Reference/corepolicyreference.htm) article.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Parameters for the {@code rebootMigrate} {@link #instanceAction(InstanceActionRequest) instanceAction}.
 *
 */
export interface RebootMigrateActionDetails extends model.InstancePowerActionDetails {
    /**
     * For bare metal instances that have local storage, this must be set to true to verify that the local storage
     * will be deleted during the migration.  For instances without, this parameter has no effect.
     *
     */
    "deleteLocalStorage"?: boolean;
    /**
      * If present, this parameter will set (or reset) the scheduled time that the instance will be reboot
  * migrated in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  This will also change
  * the {@code timeMaintenanceRebootDue} field on the instance.
  * <p>
  If not present, the reboot migration will be triggered immediately.
  *
      */
    "timeScheduled"?: Date;
    "actionType": string;
}
export declare namespace RebootMigrateActionDetails {
    function getJsonObj(obj: RebootMigrateActionDetails, isParentJsonObj?: boolean): object;
    const actionType = "rebootMigrate";
    function getDeserializedJsonObj(obj: RebootMigrateActionDetails, isParentJsonObj?: boolean): object;
}
