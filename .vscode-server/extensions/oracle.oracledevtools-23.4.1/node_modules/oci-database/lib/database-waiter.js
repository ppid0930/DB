"use strict";
/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseWaiter = void 0;
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const oci_workrequests_1 = require("oci-workrequests");
class DatabaseWaiter {
    constructor(client, workRequestClient, config) {
        this.client = client;
        this.workRequestClient = workRequestClient;
        this.config = config;
    }
    /**
     * Waits forActivateExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns ActivateExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forActivateExadataInfrastructure(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const activateExadataInfrastructureResponse = yield this.client.activateExadataInfrastructure(request);
            if (activateExadataInfrastructureResponse.opcWorkRequestId === undefined)
                return {
                    response: activateExadataInfrastructureResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, activateExadataInfrastructureResponse.opcWorkRequestId);
            return {
                response: activateExadataInfrastructureResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forAddStorageCapacityCloudExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns AddStorageCapacityCloudExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forAddStorageCapacityCloudExadataInfrastructure(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const addStorageCapacityCloudExadataInfrastructureResponse = yield this.client.addStorageCapacityCloudExadataInfrastructure(request);
            if (addStorageCapacityCloudExadataInfrastructureResponse.opcWorkRequestId === undefined)
                return {
                    response: addStorageCapacityCloudExadataInfrastructureResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, addStorageCapacityCloudExadataInfrastructureResponse.opcWorkRequestId);
            return {
                response: addStorageCapacityCloudExadataInfrastructureResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forAddStorageCapacityExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns AddStorageCapacityExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forAddStorageCapacityExadataInfrastructure(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const addStorageCapacityExadataInfrastructureResponse = yield this.client.addStorageCapacityExadataInfrastructure(request);
            if (addStorageCapacityExadataInfrastructureResponse.opcWorkRequestId === undefined)
                return {
                    response: addStorageCapacityExadataInfrastructureResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, addStorageCapacityExadataInfrastructureResponse.opcWorkRequestId);
            return {
                response: addStorageCapacityExadataInfrastructureResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forAddVirtualMachineToCloudVmCluster
     *
     * @param request the request to send
     * @return response returns AddVirtualMachineToCloudVmClusterResponse, GetWorkRequestResponse tuple
     */
    forAddVirtualMachineToCloudVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const addVirtualMachineToCloudVmClusterResponse = yield this.client.addVirtualMachineToCloudVmCluster(request);
            if (addVirtualMachineToCloudVmClusterResponse.opcWorkRequestId === undefined)
                return {
                    response: addVirtualMachineToCloudVmClusterResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, addVirtualMachineToCloudVmClusterResponse.opcWorkRequestId);
            return {
                response: addVirtualMachineToCloudVmClusterResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forAddVirtualMachineToVmCluster
     *
     * @param request the request to send
     * @return response returns AddVirtualMachineToVmClusterResponse, GetWorkRequestResponse tuple
     */
    forAddVirtualMachineToVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const addVirtualMachineToVmClusterResponse = yield this.client.addVirtualMachineToVmCluster(request);
            if (addVirtualMachineToVmClusterResponse.opcWorkRequestId === undefined)
                return {
                    response: addVirtualMachineToVmClusterResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, addVirtualMachineToVmClusterResponse.opcWorkRequestId);
            return {
                response: addVirtualMachineToVmClusterResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forAutonomousDatabaseManualRefresh
     *
     * @param request the request to send
     * @return response returns AutonomousDatabaseManualRefreshResponse, GetWorkRequestResponse tuple
     */
    forAutonomousDatabaseManualRefresh(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const autonomousDatabaseManualRefreshResponse = yield this.client.autonomousDatabaseManualRefresh(request);
            if (autonomousDatabaseManualRefreshResponse.opcWorkRequestId === undefined)
                return {
                    response: autonomousDatabaseManualRefreshResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, autonomousDatabaseManualRefreshResponse.opcWorkRequestId);
            return {
                response: autonomousDatabaseManualRefreshResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCancelBackup
     *
     * @param request the request to send
     * @return response returns CancelBackupResponse, GetWorkRequestResponse tuple
     */
    forCancelBackup(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const cancelBackupResponse = yield this.client.cancelBackup(request);
            if (cancelBackupResponse.opcWorkRequestId === undefined)
                return { response: cancelBackupResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, cancelBackupResponse.opcWorkRequestId);
            return { response: cancelBackupResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forChangeAutonomousContainerDatabaseCompartment
     *
     * @param request the request to send
     * @return response returns ChangeAutonomousContainerDatabaseCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeAutonomousContainerDatabaseCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeAutonomousContainerDatabaseCompartmentResponse = yield this.client.changeAutonomousContainerDatabaseCompartment(request);
            if (changeAutonomousContainerDatabaseCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeAutonomousContainerDatabaseCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeAutonomousContainerDatabaseCompartmentResponse.opcWorkRequestId);
            return {
                response: changeAutonomousContainerDatabaseCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeAutonomousDatabaseCompartment
     *
     * @param request the request to send
     * @return response returns ChangeAutonomousDatabaseCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeAutonomousDatabaseCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeAutonomousDatabaseCompartmentResponse = yield this.client.changeAutonomousDatabaseCompartment(request);
            if (changeAutonomousDatabaseCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeAutonomousDatabaseCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeAutonomousDatabaseCompartmentResponse.opcWorkRequestId);
            return {
                response: changeAutonomousDatabaseCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeAutonomousDatabaseSoftwareImageCompartment
     *
     * @param request the request to send
     * @return response returns ChangeAutonomousDatabaseSoftwareImageCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeAutonomousDatabaseSoftwareImageCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeAutonomousDatabaseSoftwareImageCompartmentResponse = yield this.client.changeAutonomousDatabaseSoftwareImageCompartment(request);
            if (changeAutonomousDatabaseSoftwareImageCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeAutonomousDatabaseSoftwareImageCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeAutonomousDatabaseSoftwareImageCompartmentResponse.opcWorkRequestId);
            return {
                response: changeAutonomousDatabaseSoftwareImageCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeAutonomousExadataInfrastructureCompartment
     *
     * @param request the request to send
     * @return response returns ChangeAutonomousExadataInfrastructureCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeAutonomousExadataInfrastructureCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeAutonomousExadataInfrastructureCompartmentResponse = yield this.client.changeAutonomousExadataInfrastructureCompartment(request);
            if (changeAutonomousExadataInfrastructureCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeAutonomousExadataInfrastructureCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeAutonomousExadataInfrastructureCompartmentResponse.opcWorkRequestId);
            return {
                response: changeAutonomousExadataInfrastructureCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeAutonomousVmClusterCompartment
     *
     * @param request the request to send
     * @return response returns ChangeAutonomousVmClusterCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeAutonomousVmClusterCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeAutonomousVmClusterCompartmentResponse = yield this.client.changeAutonomousVmClusterCompartment(request);
            if (changeAutonomousVmClusterCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeAutonomousVmClusterCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeAutonomousVmClusterCompartmentResponse.opcWorkRequestId);
            return {
                response: changeAutonomousVmClusterCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeBackupDestinationCompartment
     *
     * @param request the request to send
     * @return response returns ChangeBackupDestinationCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeBackupDestinationCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeBackupDestinationCompartmentResponse = yield this.client.changeBackupDestinationCompartment(request);
            if (changeBackupDestinationCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeBackupDestinationCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeBackupDestinationCompartmentResponse.opcWorkRequestId);
            return {
                response: changeBackupDestinationCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeCloudAutonomousVmClusterCompartment
     *
     * @param request the request to send
     * @return response returns ChangeCloudAutonomousVmClusterCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeCloudAutonomousVmClusterCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeCloudAutonomousVmClusterCompartmentResponse = yield this.client.changeCloudAutonomousVmClusterCompartment(request);
            if (changeCloudAutonomousVmClusterCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeCloudAutonomousVmClusterCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeCloudAutonomousVmClusterCompartmentResponse.opcWorkRequestId);
            return {
                response: changeCloudAutonomousVmClusterCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeCloudExadataInfrastructureCompartment
     *
     * @param request the request to send
     * @return response returns ChangeCloudExadataInfrastructureCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeCloudExadataInfrastructureCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeCloudExadataInfrastructureCompartmentResponse = yield this.client.changeCloudExadataInfrastructureCompartment(request);
            if (changeCloudExadataInfrastructureCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeCloudExadataInfrastructureCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeCloudExadataInfrastructureCompartmentResponse.opcWorkRequestId);
            return {
                response: changeCloudExadataInfrastructureCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeCloudVmClusterCompartment
     *
     * @param request the request to send
     * @return response returns ChangeCloudVmClusterCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeCloudVmClusterCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeCloudVmClusterCompartmentResponse = yield this.client.changeCloudVmClusterCompartment(request);
            if (changeCloudVmClusterCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeCloudVmClusterCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeCloudVmClusterCompartmentResponse.opcWorkRequestId);
            return {
                response: changeCloudVmClusterCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeDatabaseSoftwareImageCompartment
     *
     * @param request the request to send
     * @return response returns ChangeDatabaseSoftwareImageCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeDatabaseSoftwareImageCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeDatabaseSoftwareImageCompartmentResponse = yield this.client.changeDatabaseSoftwareImageCompartment(request);
            if (changeDatabaseSoftwareImageCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeDatabaseSoftwareImageCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeDatabaseSoftwareImageCompartmentResponse.opcWorkRequestId);
            return {
                response: changeDatabaseSoftwareImageCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeDataguardRole
     *
     * @param request the request to send
     * @return response returns ChangeDataguardRoleResponse, GetWorkRequestResponse tuple
     */
    forChangeDataguardRole(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeDataguardRoleResponse = yield this.client.changeDataguardRole(request);
            if (changeDataguardRoleResponse.opcWorkRequestId === undefined)
                return { response: changeDataguardRoleResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeDataguardRoleResponse.opcWorkRequestId);
            return { response: changeDataguardRoleResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forChangeDbSystemCompartment
     *
     * @param request the request to send
     * @return response returns ChangeDbSystemCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeDbSystemCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeDbSystemCompartmentResponse = yield this.client.changeDbSystemCompartment(request);
            if (changeDbSystemCompartmentResponse.opcWorkRequestId === undefined)
                return { response: changeDbSystemCompartmentResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeDbSystemCompartmentResponse.opcWorkRequestId);
            return {
                response: changeDbSystemCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeDisasterRecoveryConfiguration
     *
     * @param request the request to send
     * @return response returns ChangeDisasterRecoveryConfigurationResponse, GetWorkRequestResponse tuple
     */
    forChangeDisasterRecoveryConfiguration(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeDisasterRecoveryConfigurationResponse = yield this.client.changeDisasterRecoveryConfiguration(request);
            if (changeDisasterRecoveryConfigurationResponse.opcWorkRequestId === undefined)
                return {
                    response: changeDisasterRecoveryConfigurationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeDisasterRecoveryConfigurationResponse.opcWorkRequestId);
            return {
                response: changeDisasterRecoveryConfigurationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeExadataInfrastructureCompartment
     *
     * @param request the request to send
     * @return response returns ChangeExadataInfrastructureCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeExadataInfrastructureCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeExadataInfrastructureCompartmentResponse = yield this.client.changeExadataInfrastructureCompartment(request);
            if (changeExadataInfrastructureCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeExadataInfrastructureCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeExadataInfrastructureCompartmentResponse.opcWorkRequestId);
            return {
                response: changeExadataInfrastructureCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeExternalContainerDatabaseCompartment
     *
     * @param request the request to send
     * @return response returns ChangeExternalContainerDatabaseCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeExternalContainerDatabaseCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeExternalContainerDatabaseCompartmentResponse = yield this.client.changeExternalContainerDatabaseCompartment(request);
            if (changeExternalContainerDatabaseCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeExternalContainerDatabaseCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeExternalContainerDatabaseCompartmentResponse.opcWorkRequestId);
            return {
                response: changeExternalContainerDatabaseCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeExternalNonContainerDatabaseCompartment
     *
     * @param request the request to send
     * @return response returns ChangeExternalNonContainerDatabaseCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeExternalNonContainerDatabaseCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeExternalNonContainerDatabaseCompartmentResponse = yield this.client.changeExternalNonContainerDatabaseCompartment(request);
            if (changeExternalNonContainerDatabaseCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeExternalNonContainerDatabaseCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeExternalNonContainerDatabaseCompartmentResponse.opcWorkRequestId);
            return {
                response: changeExternalNonContainerDatabaseCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeExternalPluggableDatabaseCompartment
     *
     * @param request the request to send
     * @return response returns ChangeExternalPluggableDatabaseCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeExternalPluggableDatabaseCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeExternalPluggableDatabaseCompartmentResponse = yield this.client.changeExternalPluggableDatabaseCompartment(request);
            if (changeExternalPluggableDatabaseCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeExternalPluggableDatabaseCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeExternalPluggableDatabaseCompartmentResponse.opcWorkRequestId);
            return {
                response: changeExternalPluggableDatabaseCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeKeyStoreCompartment
     *
     * @param request the request to send
     * @return response returns ChangeKeyStoreCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeKeyStoreCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeKeyStoreCompartmentResponse = yield this.client.changeKeyStoreCompartment(request);
            if (changeKeyStoreCompartmentResponse.opcWorkRequestId === undefined)
                return { response: changeKeyStoreCompartmentResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeKeyStoreCompartmentResponse.opcWorkRequestId);
            return {
                response: changeKeyStoreCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeKeyStoreType
     *
     * @param request the request to send
     * @return response returns ChangeKeyStoreTypeResponse, GetWorkRequestResponse tuple
     */
    forChangeKeyStoreType(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeKeyStoreTypeResponse = yield this.client.changeKeyStoreType(request);
            if (changeKeyStoreTypeResponse.opcWorkRequestId === undefined)
                return { response: changeKeyStoreTypeResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeKeyStoreTypeResponse.opcWorkRequestId);
            return { response: changeKeyStoreTypeResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forChangeOneoffPatchCompartment
     *
     * @param request the request to send
     * @return response returns ChangeOneoffPatchCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeOneoffPatchCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeOneoffPatchCompartmentResponse = yield this.client.changeOneoffPatchCompartment(request);
            if (changeOneoffPatchCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeOneoffPatchCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeOneoffPatchCompartmentResponse.opcWorkRequestId);
            return {
                response: changeOneoffPatchCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forChangeVmClusterCompartment
     *
     * @param request the request to send
     * @return response returns ChangeVmClusterCompartmentResponse, GetWorkRequestResponse tuple
     */
    forChangeVmClusterCompartment(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const changeVmClusterCompartmentResponse = yield this.client.changeVmClusterCompartment(request);
            if (changeVmClusterCompartmentResponse.opcWorkRequestId === undefined)
                return {
                    response: changeVmClusterCompartmentResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, changeVmClusterCompartmentResponse.opcWorkRequestId);
            return {
                response: changeVmClusterCompartmentResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCheckExternalDatabaseConnectorConnectionStatus
     *
     * @param request the request to send
     * @return response returns CheckExternalDatabaseConnectorConnectionStatusResponse, GetWorkRequestResponse tuple
     */
    forCheckExternalDatabaseConnectorConnectionStatus(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const checkExternalDatabaseConnectorConnectionStatusResponse = yield this.client.checkExternalDatabaseConnectorConnectionStatus(request);
            if (checkExternalDatabaseConnectorConnectionStatusResponse.opcWorkRequestId === undefined)
                return {
                    response: checkExternalDatabaseConnectorConnectionStatusResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, checkExternalDatabaseConnectorConnectionStatusResponse.opcWorkRequestId);
            return {
                response: checkExternalDatabaseConnectorConnectionStatusResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCompleteExternalBackupJob
     *
     * @param request the request to send
     * @return response returns CompleteExternalBackupJobResponse, GetWorkRequestResponse tuple
     */
    forCompleteExternalBackupJob(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const completeExternalBackupJobResponse = yield this.client.completeExternalBackupJob(request);
            if (completeExternalBackupJobResponse.opcWorkRequestId === undefined)
                return { response: completeExternalBackupJobResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, completeExternalBackupJobResponse.opcWorkRequestId);
            return {
                response: completeExternalBackupJobResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forConfigureAutonomousDatabaseVaultKey
     *
     * @param request the request to send
     * @return response returns ConfigureAutonomousDatabaseVaultKeyResponse, GetWorkRequestResponse tuple
     */
    forConfigureAutonomousDatabaseVaultKey(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const configureAutonomousDatabaseVaultKeyResponse = yield this.client.configureAutonomousDatabaseVaultKey(request);
            if (configureAutonomousDatabaseVaultKeyResponse.opcWorkRequestId === undefined)
                return {
                    response: configureAutonomousDatabaseVaultKeyResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, configureAutonomousDatabaseVaultKeyResponse.opcWorkRequestId);
            return {
                response: configureAutonomousDatabaseVaultKeyResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forConfigureSaasAdminUser
     *
     * @param request the request to send
     * @return response returns ConfigureSaasAdminUserResponse, GetWorkRequestResponse tuple
     */
    forConfigureSaasAdminUser(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const configureSaasAdminUserResponse = yield this.client.configureSaasAdminUser(request);
            if (configureSaasAdminUserResponse.opcWorkRequestId === undefined)
                return { response: configureSaasAdminUserResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, configureSaasAdminUserResponse.opcWorkRequestId);
            return {
                response: configureSaasAdminUserResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forConvertToPdb
     *
     * @param request the request to send
     * @return response returns ConvertToPdbResponse, GetWorkRequestResponse tuple
     */
    forConvertToPdb(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const convertToPdbResponse = yield this.client.convertToPdb(request);
            if (convertToPdbResponse.opcWorkRequestId === undefined)
                return { response: convertToPdbResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, convertToPdbResponse.opcWorkRequestId);
            return { response: convertToPdbResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forConvertToRegularPluggableDatabase
     *
     * @param request the request to send
     * @return response returns ConvertToRegularPluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forConvertToRegularPluggableDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const convertToRegularPluggableDatabaseResponse = yield this.client.convertToRegularPluggableDatabase(request);
            if (convertToRegularPluggableDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: convertToRegularPluggableDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, convertToRegularPluggableDatabaseResponse.opcWorkRequestId);
            return {
                response: convertToRegularPluggableDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateApplicationVip
     *
     * @param request the request to send
     * @return response returns CreateApplicationVipResponse, GetWorkRequestResponse tuple
     */
    forCreateApplicationVip(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createApplicationVipResponse = yield this.client.createApplicationVip(request);
            if (createApplicationVipResponse.opcWorkRequestId === undefined)
                return { response: createApplicationVipResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createApplicationVipResponse.opcWorkRequestId);
            return { response: createApplicationVipResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreateAutonomousContainerDatabase
     *
     * @param request the request to send
     * @return response returns CreateAutonomousContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreateAutonomousContainerDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createAutonomousContainerDatabaseResponse = yield this.client.createAutonomousContainerDatabase(request);
            if (createAutonomousContainerDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: createAutonomousContainerDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createAutonomousContainerDatabaseResponse.opcWorkRequestId);
            return {
                response: createAutonomousContainerDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateAutonomousContainerDatabaseDataguardAssociation
     *
     * @param request the request to send
     * @return response returns CreateAutonomousContainerDatabaseDataguardAssociationResponse, GetWorkRequestResponse tuple
     */
    forCreateAutonomousContainerDatabaseDataguardAssociation(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createAutonomousContainerDatabaseDataguardAssociationResponse = yield this.client.createAutonomousContainerDatabaseDataguardAssociation(request);
            if (createAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId === undefined)
                return {
                    response: createAutonomousContainerDatabaseDataguardAssociationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId);
            return {
                response: createAutonomousContainerDatabaseDataguardAssociationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns CreateAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreateAutonomousDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createAutonomousDatabaseResponse = yield this.client.createAutonomousDatabase(request);
            if (createAutonomousDatabaseResponse.opcWorkRequestId === undefined)
                return { response: createAutonomousDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createAutonomousDatabaseResponse.opcWorkRequestId);
            return {
                response: createAutonomousDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateAutonomousDatabaseBackup
     *
     * @param request the request to send
     * @return response returns CreateAutonomousDatabaseBackupResponse, GetWorkRequestResponse tuple
     */
    forCreateAutonomousDatabaseBackup(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createAutonomousDatabaseBackupResponse = yield this.client.createAutonomousDatabaseBackup(request);
            if (createAutonomousDatabaseBackupResponse.opcWorkRequestId === undefined)
                return {
                    response: createAutonomousDatabaseBackupResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createAutonomousDatabaseBackupResponse.opcWorkRequestId);
            return {
                response: createAutonomousDatabaseBackupResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateAutonomousDatabaseSoftwareImage
     *
     * @param request the request to send
     * @return response returns CreateAutonomousDatabaseSoftwareImageResponse, GetWorkRequestResponse tuple
     */
    forCreateAutonomousDatabaseSoftwareImage(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createAutonomousDatabaseSoftwareImageResponse = yield this.client.createAutonomousDatabaseSoftwareImage(request);
            if (createAutonomousDatabaseSoftwareImageResponse.opcWorkRequestId === undefined)
                return {
                    response: createAutonomousDatabaseSoftwareImageResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createAutonomousDatabaseSoftwareImageResponse.opcWorkRequestId);
            return {
                response: createAutonomousDatabaseSoftwareImageResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateAutonomousVmCluster
     *
     * @param request the request to send
     * @return response returns CreateAutonomousVmClusterResponse, GetWorkRequestResponse tuple
     */
    forCreateAutonomousVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createAutonomousVmClusterResponse = yield this.client.createAutonomousVmCluster(request);
            if (createAutonomousVmClusterResponse.opcWorkRequestId === undefined)
                return { response: createAutonomousVmClusterResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createAutonomousVmClusterResponse.opcWorkRequestId);
            return {
                response: createAutonomousVmClusterResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateBackup
     *
     * @param request the request to send
     * @return response returns CreateBackupResponse, GetWorkRequestResponse tuple
     */
    forCreateBackup(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createBackupResponse = yield this.client.createBackup(request);
            if (createBackupResponse.opcWorkRequestId === undefined)
                return { response: createBackupResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createBackupResponse.opcWorkRequestId);
            return { response: createBackupResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreateCloudAutonomousVmCluster
     *
     * @param request the request to send
     * @return response returns CreateCloudAutonomousVmClusterResponse, GetWorkRequestResponse tuple
     */
    forCreateCloudAutonomousVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createCloudAutonomousVmClusterResponse = yield this.client.createCloudAutonomousVmCluster(request);
            if (createCloudAutonomousVmClusterResponse.opcWorkRequestId === undefined)
                return {
                    response: createCloudAutonomousVmClusterResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createCloudAutonomousVmClusterResponse.opcWorkRequestId);
            return {
                response: createCloudAutonomousVmClusterResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateCloudExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns CreateCloudExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forCreateCloudExadataInfrastructure(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createCloudExadataInfrastructureResponse = yield this.client.createCloudExadataInfrastructure(request);
            if (createCloudExadataInfrastructureResponse.opcWorkRequestId === undefined)
                return {
                    response: createCloudExadataInfrastructureResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createCloudExadataInfrastructureResponse.opcWorkRequestId);
            return {
                response: createCloudExadataInfrastructureResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateCloudVmCluster
     *
     * @param request the request to send
     * @return response returns CreateCloudVmClusterResponse, GetWorkRequestResponse tuple
     */
    forCreateCloudVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createCloudVmClusterResponse = yield this.client.createCloudVmCluster(request);
            if (createCloudVmClusterResponse.opcWorkRequestId === undefined)
                return { response: createCloudVmClusterResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createCloudVmClusterResponse.opcWorkRequestId);
            return { response: createCloudVmClusterResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreateConsoleConnection
     *
     * @param request the request to send
     * @return response returns CreateConsoleConnectionResponse, GetWorkRequestResponse tuple
     */
    forCreateConsoleConnection(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createConsoleConnectionResponse = yield this.client.createConsoleConnection(request);
            if (createConsoleConnectionResponse.opcWorkRequestId === undefined)
                return { response: createConsoleConnectionResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createConsoleConnectionResponse.opcWorkRequestId);
            return {
                response: createConsoleConnectionResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateConsoleHistory
     *
     * @param request the request to send
     * @return response returns CreateConsoleHistoryResponse, GetWorkRequestResponse tuple
     */
    forCreateConsoleHistory(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createConsoleHistoryResponse = yield this.client.createConsoleHistory(request);
            if (createConsoleHistoryResponse.opcWorkRequestId === undefined)
                return { response: createConsoleHistoryResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createConsoleHistoryResponse.opcWorkRequestId);
            return { response: createConsoleHistoryResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreateDataGuardAssociation
     *
     * @param request the request to send
     * @return response returns CreateDataGuardAssociationResponse, GetWorkRequestResponse tuple
     */
    forCreateDataGuardAssociation(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createDataGuardAssociationResponse = yield this.client.createDataGuardAssociation(request);
            if (createDataGuardAssociationResponse.opcWorkRequestId === undefined)
                return {
                    response: createDataGuardAssociationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createDataGuardAssociationResponse.opcWorkRequestId);
            return {
                response: createDataGuardAssociationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateDatabase
     *
     * @param request the request to send
     * @return response returns CreateDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreateDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createDatabaseResponse = yield this.client.createDatabase(request);
            if (createDatabaseResponse.opcWorkRequestId === undefined)
                return { response: createDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createDatabaseResponse.opcWorkRequestId);
            return { response: createDatabaseResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreateDatabaseSoftwareImage
     *
     * @param request the request to send
     * @return response returns CreateDatabaseSoftwareImageResponse, GetWorkRequestResponse tuple
     */
    forCreateDatabaseSoftwareImage(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createDatabaseSoftwareImageResponse = yield this.client.createDatabaseSoftwareImage(request);
            if (createDatabaseSoftwareImageResponse.opcWorkRequestId === undefined)
                return {
                    response: createDatabaseSoftwareImageResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createDatabaseSoftwareImageResponse.opcWorkRequestId);
            return {
                response: createDatabaseSoftwareImageResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateDbHome
     *
     * @param request the request to send
     * @return response returns CreateDbHomeResponse, GetWorkRequestResponse tuple
     */
    forCreateDbHome(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createDbHomeResponse = yield this.client.createDbHome(request);
            if (createDbHomeResponse.opcWorkRequestId === undefined)
                return { response: createDbHomeResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createDbHomeResponse.opcWorkRequestId);
            return { response: createDbHomeResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreateExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns CreateExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forCreateExadataInfrastructure(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createExadataInfrastructureResponse = yield this.client.createExadataInfrastructure(request);
            if (createExadataInfrastructureResponse.opcWorkRequestId === undefined)
                return {
                    response: createExadataInfrastructureResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createExadataInfrastructureResponse.opcWorkRequestId);
            return {
                response: createExadataInfrastructureResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateExternalBackupJob
     *
     * @param request the request to send
     * @return response returns CreateExternalBackupJobResponse, GetWorkRequestResponse tuple
     */
    forCreateExternalBackupJob(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createExternalBackupJobResponse = yield this.client.createExternalBackupJob(request);
            if (createExternalBackupJobResponse.opcWorkRequestId === undefined)
                return { response: createExternalBackupJobResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createExternalBackupJobResponse.opcWorkRequestId);
            return {
                response: createExternalBackupJobResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateExternalContainerDatabase
     *
     * @param request the request to send
     * @return response returns CreateExternalContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreateExternalContainerDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createExternalContainerDatabaseResponse = yield this.client.createExternalContainerDatabase(request);
            if (createExternalContainerDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: createExternalContainerDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createExternalContainerDatabaseResponse.opcWorkRequestId);
            return {
                response: createExternalContainerDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateExternalDatabaseConnector
     *
     * @param request the request to send
     * @return response returns CreateExternalDatabaseConnectorResponse, GetWorkRequestResponse tuple
     */
    forCreateExternalDatabaseConnector(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createExternalDatabaseConnectorResponse = yield this.client.createExternalDatabaseConnector(request);
            if (createExternalDatabaseConnectorResponse.opcWorkRequestId === undefined)
                return {
                    response: createExternalDatabaseConnectorResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createExternalDatabaseConnectorResponse.opcWorkRequestId);
            return {
                response: createExternalDatabaseConnectorResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateExternalNonContainerDatabase
     *
     * @param request the request to send
     * @return response returns CreateExternalNonContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreateExternalNonContainerDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createExternalNonContainerDatabaseResponse = yield this.client.createExternalNonContainerDatabase(request);
            if (createExternalNonContainerDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: createExternalNonContainerDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createExternalNonContainerDatabaseResponse.opcWorkRequestId);
            return {
                response: createExternalNonContainerDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateExternalPluggableDatabase
     *
     * @param request the request to send
     * @return response returns CreateExternalPluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreateExternalPluggableDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createExternalPluggableDatabaseResponse = yield this.client.createExternalPluggableDatabase(request);
            if (createExternalPluggableDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: createExternalPluggableDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createExternalPluggableDatabaseResponse.opcWorkRequestId);
            return {
                response: createExternalPluggableDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateOneoffPatch
     *
     * @param request the request to send
     * @return response returns CreateOneoffPatchResponse, GetWorkRequestResponse tuple
     */
    forCreateOneoffPatch(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createOneoffPatchResponse = yield this.client.createOneoffPatch(request);
            if (createOneoffPatchResponse.opcWorkRequestId === undefined)
                return { response: createOneoffPatchResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createOneoffPatchResponse.opcWorkRequestId);
            return { response: createOneoffPatchResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreatePluggableDatabase
     *
     * @param request the request to send
     * @return response returns CreatePluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forCreatePluggableDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createPluggableDatabaseResponse = yield this.client.createPluggableDatabase(request);
            if (createPluggableDatabaseResponse.opcWorkRequestId === undefined)
                return { response: createPluggableDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createPluggableDatabaseResponse.opcWorkRequestId);
            return {
                response: createPluggableDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forCreateVmCluster
     *
     * @param request the request to send
     * @return response returns CreateVmClusterResponse, GetWorkRequestResponse tuple
     */
    forCreateVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createVmClusterResponse = yield this.client.createVmCluster(request);
            if (createVmClusterResponse.opcWorkRequestId === undefined)
                return { response: createVmClusterResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createVmClusterResponse.opcWorkRequestId);
            return { response: createVmClusterResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forCreateVmClusterNetwork
     *
     * @param request the request to send
     * @return response returns CreateVmClusterNetworkResponse, GetWorkRequestResponse tuple
     */
    forCreateVmClusterNetwork(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const createVmClusterNetworkResponse = yield this.client.createVmClusterNetwork(request);
            if (createVmClusterNetworkResponse.opcWorkRequestId === undefined)
                return { response: createVmClusterNetworkResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, createVmClusterNetworkResponse.opcWorkRequestId);
            return {
                response: createVmClusterNetworkResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDbNodeAction
     *
     * @param request the request to send
     * @return response returns DbNodeActionResponse, GetWorkRequestResponse tuple
     */
    forDbNodeAction(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const dbNodeActionResponse = yield this.client.dbNodeAction(request);
            if (dbNodeActionResponse.opcWorkRequestId === undefined)
                return { response: dbNodeActionResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, dbNodeActionResponse.opcWorkRequestId);
            return { response: dbNodeActionResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteApplicationVip
     *
     * @param request the request to send
     * @return response returns DeleteApplicationVipResponse, GetWorkRequestResponse tuple
     */
    forDeleteApplicationVip(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteApplicationVipResponse = yield this.client.deleteApplicationVip(request);
            if (deleteApplicationVipResponse.opcWorkRequestId === undefined)
                return { response: deleteApplicationVipResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteApplicationVipResponse.opcWorkRequestId);
            return { response: deleteApplicationVipResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns DeleteAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forDeleteAutonomousDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteAutonomousDatabaseResponse = yield this.client.deleteAutonomousDatabase(request);
            if (deleteAutonomousDatabaseResponse.opcWorkRequestId === undefined)
                return { response: deleteAutonomousDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteAutonomousDatabaseResponse.opcWorkRequestId);
            return {
                response: deleteAutonomousDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteAutonomousDatabaseBackup
     *
     * @param request the request to send
     * @return response returns DeleteAutonomousDatabaseBackupResponse, GetWorkRequestResponse tuple
     */
    forDeleteAutonomousDatabaseBackup(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteAutonomousDatabaseBackupResponse = yield this.client.deleteAutonomousDatabaseBackup(request);
            if (deleteAutonomousDatabaseBackupResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteAutonomousDatabaseBackupResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteAutonomousDatabaseBackupResponse.opcWorkRequestId);
            return {
                response: deleteAutonomousDatabaseBackupResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteAutonomousDatabaseSoftwareImage
     *
     * @param request the request to send
     * @return response returns DeleteAutonomousDatabaseSoftwareImageResponse, GetWorkRequestResponse tuple
     */
    forDeleteAutonomousDatabaseSoftwareImage(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteAutonomousDatabaseSoftwareImageResponse = yield this.client.deleteAutonomousDatabaseSoftwareImage(request);
            if (deleteAutonomousDatabaseSoftwareImageResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteAutonomousDatabaseSoftwareImageResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteAutonomousDatabaseSoftwareImageResponse.opcWorkRequestId);
            return {
                response: deleteAutonomousDatabaseSoftwareImageResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteAutonomousVmCluster
     *
     * @param request the request to send
     * @return response returns DeleteAutonomousVmClusterResponse, GetWorkRequestResponse tuple
     */
    forDeleteAutonomousVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteAutonomousVmClusterResponse = yield this.client.deleteAutonomousVmCluster(request);
            if (deleteAutonomousVmClusterResponse.opcWorkRequestId === undefined)
                return { response: deleteAutonomousVmClusterResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteAutonomousVmClusterResponse.opcWorkRequestId);
            return {
                response: deleteAutonomousVmClusterResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteBackup
     *
     * @param request the request to send
     * @return response returns DeleteBackupResponse, GetWorkRequestResponse tuple
     */
    forDeleteBackup(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteBackupResponse = yield this.client.deleteBackup(request);
            if (deleteBackupResponse.opcWorkRequestId === undefined)
                return { response: deleteBackupResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteBackupResponse.opcWorkRequestId);
            return { response: deleteBackupResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteCloudAutonomousVmCluster
     *
     * @param request the request to send
     * @return response returns DeleteCloudAutonomousVmClusterResponse, GetWorkRequestResponse tuple
     */
    forDeleteCloudAutonomousVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteCloudAutonomousVmClusterResponse = yield this.client.deleteCloudAutonomousVmCluster(request);
            if (deleteCloudAutonomousVmClusterResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteCloudAutonomousVmClusterResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteCloudAutonomousVmClusterResponse.opcWorkRequestId);
            return {
                response: deleteCloudAutonomousVmClusterResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteCloudExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns DeleteCloudExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forDeleteCloudExadataInfrastructure(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteCloudExadataInfrastructureResponse = yield this.client.deleteCloudExadataInfrastructure(request);
            if (deleteCloudExadataInfrastructureResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteCloudExadataInfrastructureResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteCloudExadataInfrastructureResponse.opcWorkRequestId);
            return {
                response: deleteCloudExadataInfrastructureResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteCloudVmCluster
     *
     * @param request the request to send
     * @return response returns DeleteCloudVmClusterResponse, GetWorkRequestResponse tuple
     */
    forDeleteCloudVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteCloudVmClusterResponse = yield this.client.deleteCloudVmCluster(request);
            if (deleteCloudVmClusterResponse.opcWorkRequestId === undefined)
                return { response: deleteCloudVmClusterResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteCloudVmClusterResponse.opcWorkRequestId);
            return { response: deleteCloudVmClusterResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteConsoleConnection
     *
     * @param request the request to send
     * @return response returns DeleteConsoleConnectionResponse, GetWorkRequestResponse tuple
     */
    forDeleteConsoleConnection(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteConsoleConnectionResponse = yield this.client.deleteConsoleConnection(request);
            if (deleteConsoleConnectionResponse.opcWorkRequestId === undefined)
                return { response: deleteConsoleConnectionResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteConsoleConnectionResponse.opcWorkRequestId);
            return {
                response: deleteConsoleConnectionResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteConsoleHistory
     *
     * @param request the request to send
     * @return response returns DeleteConsoleHistoryResponse, GetWorkRequestResponse tuple
     */
    forDeleteConsoleHistory(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteConsoleHistoryResponse = yield this.client.deleteConsoleHistory(request);
            if (deleteConsoleHistoryResponse.opcWorkRequestId === undefined)
                return { response: deleteConsoleHistoryResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteConsoleHistoryResponse.opcWorkRequestId);
            return { response: deleteConsoleHistoryResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteDatabase
     *
     * @param request the request to send
     * @return response returns DeleteDatabaseResponse, GetWorkRequestResponse tuple
     */
    forDeleteDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteDatabaseResponse = yield this.client.deleteDatabase(request);
            if (deleteDatabaseResponse.opcWorkRequestId === undefined)
                return { response: deleteDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteDatabaseResponse.opcWorkRequestId);
            return { response: deleteDatabaseResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteDatabaseSoftwareImage
     *
     * @param request the request to send
     * @return response returns DeleteDatabaseSoftwareImageResponse, GetWorkRequestResponse tuple
     */
    forDeleteDatabaseSoftwareImage(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteDatabaseSoftwareImageResponse = yield this.client.deleteDatabaseSoftwareImage(request);
            if (deleteDatabaseSoftwareImageResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteDatabaseSoftwareImageResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteDatabaseSoftwareImageResponse.opcWorkRequestId);
            return {
                response: deleteDatabaseSoftwareImageResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteDbHome
     *
     * @param request the request to send
     * @return response returns DeleteDbHomeResponse, GetWorkRequestResponse tuple
     */
    forDeleteDbHome(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteDbHomeResponse = yield this.client.deleteDbHome(request);
            if (deleteDbHomeResponse.opcWorkRequestId === undefined)
                return { response: deleteDbHomeResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteDbHomeResponse.opcWorkRequestId);
            return { response: deleteDbHomeResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns DeleteExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forDeleteExadataInfrastructure(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteExadataInfrastructureResponse = yield this.client.deleteExadataInfrastructure(request);
            if (deleteExadataInfrastructureResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteExadataInfrastructureResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteExadataInfrastructureResponse.opcWorkRequestId);
            return {
                response: deleteExadataInfrastructureResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteExternalContainerDatabase
     *
     * @param request the request to send
     * @return response returns DeleteExternalContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forDeleteExternalContainerDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteExternalContainerDatabaseResponse = yield this.client.deleteExternalContainerDatabase(request);
            if (deleteExternalContainerDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteExternalContainerDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteExternalContainerDatabaseResponse.opcWorkRequestId);
            return {
                response: deleteExternalContainerDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteExternalDatabaseConnector
     *
     * @param request the request to send
     * @return response returns DeleteExternalDatabaseConnectorResponse, GetWorkRequestResponse tuple
     */
    forDeleteExternalDatabaseConnector(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteExternalDatabaseConnectorResponse = yield this.client.deleteExternalDatabaseConnector(request);
            if (deleteExternalDatabaseConnectorResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteExternalDatabaseConnectorResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteExternalDatabaseConnectorResponse.opcWorkRequestId);
            return {
                response: deleteExternalDatabaseConnectorResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteExternalNonContainerDatabase
     *
     * @param request the request to send
     * @return response returns DeleteExternalNonContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forDeleteExternalNonContainerDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteExternalNonContainerDatabaseResponse = yield this.client.deleteExternalNonContainerDatabase(request);
            if (deleteExternalNonContainerDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteExternalNonContainerDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteExternalNonContainerDatabaseResponse.opcWorkRequestId);
            return {
                response: deleteExternalNonContainerDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteExternalPluggableDatabase
     *
     * @param request the request to send
     * @return response returns DeleteExternalPluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forDeleteExternalPluggableDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteExternalPluggableDatabaseResponse = yield this.client.deleteExternalPluggableDatabase(request);
            if (deleteExternalPluggableDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: deleteExternalPluggableDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteExternalPluggableDatabaseResponse.opcWorkRequestId);
            return {
                response: deleteExternalPluggableDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteOneoffPatch
     *
     * @param request the request to send
     * @return response returns DeleteOneoffPatchResponse, GetWorkRequestResponse tuple
     */
    forDeleteOneoffPatch(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteOneoffPatchResponse = yield this.client.deleteOneoffPatch(request);
            if (deleteOneoffPatchResponse.opcWorkRequestId === undefined)
                return { response: deleteOneoffPatchResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteOneoffPatchResponse.opcWorkRequestId);
            return { response: deleteOneoffPatchResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeletePluggableDatabase
     *
     * @param request the request to send
     * @return response returns DeletePluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forDeletePluggableDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deletePluggableDatabaseResponse = yield this.client.deletePluggableDatabase(request);
            if (deletePluggableDatabaseResponse.opcWorkRequestId === undefined)
                return { response: deletePluggableDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deletePluggableDatabaseResponse.opcWorkRequestId);
            return {
                response: deletePluggableDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeleteVmCluster
     *
     * @param request the request to send
     * @return response returns DeleteVmClusterResponse, GetWorkRequestResponse tuple
     */
    forDeleteVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteVmClusterResponse = yield this.client.deleteVmCluster(request);
            if (deleteVmClusterResponse.opcWorkRequestId === undefined)
                return { response: deleteVmClusterResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteVmClusterResponse.opcWorkRequestId);
            return { response: deleteVmClusterResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forDeleteVmClusterNetwork
     *
     * @param request the request to send
     * @return response returns DeleteVmClusterNetworkResponse, GetWorkRequestResponse tuple
     */
    forDeleteVmClusterNetwork(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteVmClusterNetworkResponse = yield this.client.deleteVmClusterNetwork(request);
            if (deleteVmClusterNetworkResponse.opcWorkRequestId === undefined)
                return { response: deleteVmClusterNetworkResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deleteVmClusterNetworkResponse.opcWorkRequestId);
            return {
                response: deleteVmClusterNetworkResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDeregisterAutonomousDatabaseDataSafe
     *
     * @param request the request to send
     * @return response returns DeregisterAutonomousDatabaseDataSafeResponse, GetWorkRequestResponse tuple
     */
    forDeregisterAutonomousDatabaseDataSafe(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const deregisterAutonomousDatabaseDataSafeResponse = yield this.client.deregisterAutonomousDatabaseDataSafe(request);
            if (deregisterAutonomousDatabaseDataSafeResponse.opcWorkRequestId === undefined)
                return {
                    response: deregisterAutonomousDatabaseDataSafeResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, deregisterAutonomousDatabaseDataSafeResponse.opcWorkRequestId);
            return {
                response: deregisterAutonomousDatabaseDataSafeResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDisableAutonomousDatabaseManagement
     *
     * @param request the request to send
     * @return response returns DisableAutonomousDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forDisableAutonomousDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const disableAutonomousDatabaseManagementResponse = yield this.client.disableAutonomousDatabaseManagement(request);
            if (disableAutonomousDatabaseManagementResponse.opcWorkRequestId === undefined)
                return {
                    response: disableAutonomousDatabaseManagementResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, disableAutonomousDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: disableAutonomousDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDisableAutonomousDatabaseOperationsInsights
     *
     * @param request the request to send
     * @return response returns DisableAutonomousDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
     */
    forDisableAutonomousDatabaseOperationsInsights(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const disableAutonomousDatabaseOperationsInsightsResponse = yield this.client.disableAutonomousDatabaseOperationsInsights(request);
            if (disableAutonomousDatabaseOperationsInsightsResponse.opcWorkRequestId === undefined)
                return {
                    response: disableAutonomousDatabaseOperationsInsightsResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, disableAutonomousDatabaseOperationsInsightsResponse.opcWorkRequestId);
            return {
                response: disableAutonomousDatabaseOperationsInsightsResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDisableDatabaseManagement
     *
     * @param request the request to send
     * @return response returns DisableDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forDisableDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const disableDatabaseManagementResponse = yield this.client.disableDatabaseManagement(request);
            if (disableDatabaseManagementResponse.opcWorkRequestId === undefined)
                return { response: disableDatabaseManagementResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, disableDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: disableDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDisableExternalContainerDatabaseDatabaseManagement
     *
     * @param request the request to send
     * @return response returns DisableExternalContainerDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalContainerDatabaseDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const disableExternalContainerDatabaseDatabaseManagementResponse = yield this.client.disableExternalContainerDatabaseDatabaseManagement(request);
            if (disableExternalContainerDatabaseDatabaseManagementResponse.opcWorkRequestId === undefined)
                return {
                    response: disableExternalContainerDatabaseDatabaseManagementResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, disableExternalContainerDatabaseDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: disableExternalContainerDatabaseDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDisableExternalContainerDatabaseStackMonitoring
     *
     * @param request the request to send
     * @return response returns DisableExternalContainerDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalContainerDatabaseStackMonitoring(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const disableExternalContainerDatabaseStackMonitoringResponse = yield this.client.disableExternalContainerDatabaseStackMonitoring(request);
            if (disableExternalContainerDatabaseStackMonitoringResponse.opcWorkRequestId === undefined)
                return {
                    response: disableExternalContainerDatabaseStackMonitoringResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, disableExternalContainerDatabaseStackMonitoringResponse.opcWorkRequestId);
            return {
                response: disableExternalContainerDatabaseStackMonitoringResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDisableExternalNonContainerDatabaseDatabaseManagement
     *
     * @param request the request to send
     * @return response returns DisableExternalNonContainerDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalNonContainerDatabaseDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const disableExternalNonContainerDatabaseDatabaseManagementResponse = yield this.client.disableExternalNonContainerDatabaseDatabaseManagement(request);
            if (disableExternalNonContainerDatabaseDatabaseManagementResponse.opcWorkRequestId === undefined)
                return {
                    response: disableExternalNonContainerDatabaseDatabaseManagementResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, disableExternalNonContainerDatabaseDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: disableExternalNonContainerDatabaseDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDisableExternalNonContainerDatabaseOperationsInsights
     *
     * @param request the request to send
     * @return response returns DisableExternalNonContainerDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalNonContainerDatabaseOperationsInsights(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const disableExternalNonContainerDatabaseOperationsInsightsResponse = yield this.client.disableExternalNonContainerDatabaseOperationsInsights(request);
            if (disableExternalNonContainerDatabaseOperationsInsightsResponse.opcWorkRequestId === undefined)
                return {
                    response: disableExternalNonContainerDatabaseOperationsInsightsResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, disableExternalNonContainerDatabaseOperationsInsightsResponse.opcWorkRequestId);
            return {
                response: disableExternalNonContainerDatabaseOperationsInsightsResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDisableExternalNonContainerDatabaseStackMonitoring
     *
     * @param request the request to send
     * @return response returns DisableExternalNonContainerDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalNonContainerDatabaseStackMonitoring(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const disableExternalNonContainerDatabaseStackMonitoringResponse = yield this.client.disableExternalNonContainerDatabaseStackMonitoring(request);
            if (disableExternalNonContainerDatabaseStackMonitoringResponse.opcWorkRequestId === undefined)
                return {
                    response: disableExternalNonContainerDatabaseStackMonitoringResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, disableExternalNonContainerDatabaseStackMonitoringResponse.opcWorkRequestId);
            return {
                response: disableExternalNonContainerDatabaseStackMonitoringResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDisableExternalPluggableDatabaseDatabaseManagement
     *
     * @param request the request to send
     * @return response returns DisableExternalPluggableDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalPluggableDatabaseDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const disableExternalPluggableDatabaseDatabaseManagementResponse = yield this.client.disableExternalPluggableDatabaseDatabaseManagement(request);
            if (disableExternalPluggableDatabaseDatabaseManagementResponse.opcWorkRequestId === undefined)
                return {
                    response: disableExternalPluggableDatabaseDatabaseManagementResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, disableExternalPluggableDatabaseDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: disableExternalPluggableDatabaseDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDisableExternalPluggableDatabaseOperationsInsights
     *
     * @param request the request to send
     * @return response returns DisableExternalPluggableDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalPluggableDatabaseOperationsInsights(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const disableExternalPluggableDatabaseOperationsInsightsResponse = yield this.client.disableExternalPluggableDatabaseOperationsInsights(request);
            if (disableExternalPluggableDatabaseOperationsInsightsResponse.opcWorkRequestId === undefined)
                return {
                    response: disableExternalPluggableDatabaseOperationsInsightsResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, disableExternalPluggableDatabaseOperationsInsightsResponse.opcWorkRequestId);
            return {
                response: disableExternalPluggableDatabaseOperationsInsightsResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDisableExternalPluggableDatabaseStackMonitoring
     *
     * @param request the request to send
     * @return response returns DisableExternalPluggableDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
     */
    forDisableExternalPluggableDatabaseStackMonitoring(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const disableExternalPluggableDatabaseStackMonitoringResponse = yield this.client.disableExternalPluggableDatabaseStackMonitoring(request);
            if (disableExternalPluggableDatabaseStackMonitoringResponse.opcWorkRequestId === undefined)
                return {
                    response: disableExternalPluggableDatabaseStackMonitoringResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, disableExternalPluggableDatabaseStackMonitoringResponse.opcWorkRequestId);
            return {
                response: disableExternalPluggableDatabaseStackMonitoringResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forDisablePluggableDatabaseManagement
     *
     * @param request the request to send
     * @return response returns DisablePluggableDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forDisablePluggableDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const disablePluggableDatabaseManagementResponse = yield this.client.disablePluggableDatabaseManagement(request);
            if (disablePluggableDatabaseManagementResponse.opcWorkRequestId === undefined)
                return {
                    response: disablePluggableDatabaseManagementResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, disablePluggableDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: disablePluggableDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forEnableAutonomousDatabaseManagement
     *
     * @param request the request to send
     * @return response returns EnableAutonomousDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forEnableAutonomousDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const enableAutonomousDatabaseManagementResponse = yield this.client.enableAutonomousDatabaseManagement(request);
            if (enableAutonomousDatabaseManagementResponse.opcWorkRequestId === undefined)
                return {
                    response: enableAutonomousDatabaseManagementResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, enableAutonomousDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: enableAutonomousDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forEnableAutonomousDatabaseOperationsInsights
     *
     * @param request the request to send
     * @return response returns EnableAutonomousDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
     */
    forEnableAutonomousDatabaseOperationsInsights(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const enableAutonomousDatabaseOperationsInsightsResponse = yield this.client.enableAutonomousDatabaseOperationsInsights(request);
            if (enableAutonomousDatabaseOperationsInsightsResponse.opcWorkRequestId === undefined)
                return {
                    response: enableAutonomousDatabaseOperationsInsightsResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, enableAutonomousDatabaseOperationsInsightsResponse.opcWorkRequestId);
            return {
                response: enableAutonomousDatabaseOperationsInsightsResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forEnableDatabaseManagement
     *
     * @param request the request to send
     * @return response returns EnableDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forEnableDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const enableDatabaseManagementResponse = yield this.client.enableDatabaseManagement(request);
            if (enableDatabaseManagementResponse.opcWorkRequestId === undefined)
                return { response: enableDatabaseManagementResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, enableDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: enableDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forEnableExternalContainerDatabaseDatabaseManagement
     *
     * @param request the request to send
     * @return response returns EnableExternalContainerDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalContainerDatabaseDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const enableExternalContainerDatabaseDatabaseManagementResponse = yield this.client.enableExternalContainerDatabaseDatabaseManagement(request);
            if (enableExternalContainerDatabaseDatabaseManagementResponse.opcWorkRequestId === undefined)
                return {
                    response: enableExternalContainerDatabaseDatabaseManagementResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, enableExternalContainerDatabaseDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: enableExternalContainerDatabaseDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forEnableExternalContainerDatabaseStackMonitoring
     *
     * @param request the request to send
     * @return response returns EnableExternalContainerDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalContainerDatabaseStackMonitoring(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const enableExternalContainerDatabaseStackMonitoringResponse = yield this.client.enableExternalContainerDatabaseStackMonitoring(request);
            if (enableExternalContainerDatabaseStackMonitoringResponse.opcWorkRequestId === undefined)
                return {
                    response: enableExternalContainerDatabaseStackMonitoringResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, enableExternalContainerDatabaseStackMonitoringResponse.opcWorkRequestId);
            return {
                response: enableExternalContainerDatabaseStackMonitoringResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forEnableExternalNonContainerDatabaseDatabaseManagement
     *
     * @param request the request to send
     * @return response returns EnableExternalNonContainerDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalNonContainerDatabaseDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const enableExternalNonContainerDatabaseDatabaseManagementResponse = yield this.client.enableExternalNonContainerDatabaseDatabaseManagement(request);
            if (enableExternalNonContainerDatabaseDatabaseManagementResponse.opcWorkRequestId === undefined)
                return {
                    response: enableExternalNonContainerDatabaseDatabaseManagementResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, enableExternalNonContainerDatabaseDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: enableExternalNonContainerDatabaseDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forEnableExternalNonContainerDatabaseOperationsInsights
     *
     * @param request the request to send
     * @return response returns EnableExternalNonContainerDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalNonContainerDatabaseOperationsInsights(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const enableExternalNonContainerDatabaseOperationsInsightsResponse = yield this.client.enableExternalNonContainerDatabaseOperationsInsights(request);
            if (enableExternalNonContainerDatabaseOperationsInsightsResponse.opcWorkRequestId === undefined)
                return {
                    response: enableExternalNonContainerDatabaseOperationsInsightsResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, enableExternalNonContainerDatabaseOperationsInsightsResponse.opcWorkRequestId);
            return {
                response: enableExternalNonContainerDatabaseOperationsInsightsResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forEnableExternalNonContainerDatabaseStackMonitoring
     *
     * @param request the request to send
     * @return response returns EnableExternalNonContainerDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalNonContainerDatabaseStackMonitoring(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const enableExternalNonContainerDatabaseStackMonitoringResponse = yield this.client.enableExternalNonContainerDatabaseStackMonitoring(request);
            if (enableExternalNonContainerDatabaseStackMonitoringResponse.opcWorkRequestId === undefined)
                return {
                    response: enableExternalNonContainerDatabaseStackMonitoringResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, enableExternalNonContainerDatabaseStackMonitoringResponse.opcWorkRequestId);
            return {
                response: enableExternalNonContainerDatabaseStackMonitoringResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forEnableExternalPluggableDatabaseDatabaseManagement
     *
     * @param request the request to send
     * @return response returns EnableExternalPluggableDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalPluggableDatabaseDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const enableExternalPluggableDatabaseDatabaseManagementResponse = yield this.client.enableExternalPluggableDatabaseDatabaseManagement(request);
            if (enableExternalPluggableDatabaseDatabaseManagementResponse.opcWorkRequestId === undefined)
                return {
                    response: enableExternalPluggableDatabaseDatabaseManagementResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, enableExternalPluggableDatabaseDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: enableExternalPluggableDatabaseDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forEnableExternalPluggableDatabaseOperationsInsights
     *
     * @param request the request to send
     * @return response returns EnableExternalPluggableDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalPluggableDatabaseOperationsInsights(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const enableExternalPluggableDatabaseOperationsInsightsResponse = yield this.client.enableExternalPluggableDatabaseOperationsInsights(request);
            if (enableExternalPluggableDatabaseOperationsInsightsResponse.opcWorkRequestId === undefined)
                return {
                    response: enableExternalPluggableDatabaseOperationsInsightsResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, enableExternalPluggableDatabaseOperationsInsightsResponse.opcWorkRequestId);
            return {
                response: enableExternalPluggableDatabaseOperationsInsightsResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forEnableExternalPluggableDatabaseStackMonitoring
     *
     * @param request the request to send
     * @return response returns EnableExternalPluggableDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
     */
    forEnableExternalPluggableDatabaseStackMonitoring(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const enableExternalPluggableDatabaseStackMonitoringResponse = yield this.client.enableExternalPluggableDatabaseStackMonitoring(request);
            if (enableExternalPluggableDatabaseStackMonitoringResponse.opcWorkRequestId === undefined)
                return {
                    response: enableExternalPluggableDatabaseStackMonitoringResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, enableExternalPluggableDatabaseStackMonitoringResponse.opcWorkRequestId);
            return {
                response: enableExternalPluggableDatabaseStackMonitoringResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forEnablePluggableDatabaseManagement
     *
     * @param request the request to send
     * @return response returns EnablePluggableDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forEnablePluggableDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const enablePluggableDatabaseManagementResponse = yield this.client.enablePluggableDatabaseManagement(request);
            if (enablePluggableDatabaseManagementResponse.opcWorkRequestId === undefined)
                return {
                    response: enablePluggableDatabaseManagementResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, enablePluggableDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: enablePluggableDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forFailOverAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns FailOverAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forFailOverAutonomousDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const failOverAutonomousDatabaseResponse = yield this.client.failOverAutonomousDatabase(request);
            if (failOverAutonomousDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: failOverAutonomousDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, failOverAutonomousDatabaseResponse.opcWorkRequestId);
            return {
                response: failOverAutonomousDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forFailoverAutonomousContainerDatabaseDataguardAssociation
     *
     * @param request the request to send
     * @return response returns FailoverAutonomousContainerDatabaseDataguardAssociationResponse, GetWorkRequestResponse tuple
     */
    forFailoverAutonomousContainerDatabaseDataguardAssociation(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const failoverAutonomousContainerDatabaseDataguardAssociationResponse = yield this.client.failoverAutonomousContainerDatabaseDataguardAssociation(request);
            if (failoverAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId === undefined)
                return {
                    response: failoverAutonomousContainerDatabaseDataguardAssociationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, failoverAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId);
            return {
                response: failoverAutonomousContainerDatabaseDataguardAssociationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forFailoverDataGuardAssociation
     *
     * @param request the request to send
     * @return response returns FailoverDataGuardAssociationResponse, GetWorkRequestResponse tuple
     */
    forFailoverDataGuardAssociation(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const failoverDataGuardAssociationResponse = yield this.client.failoverDataGuardAssociation(request);
            if (failoverDataGuardAssociationResponse.opcWorkRequestId === undefined)
                return {
                    response: failoverDataGuardAssociationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, failoverDataGuardAssociationResponse.opcWorkRequestId);
            return {
                response: failoverDataGuardAssociationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forApplicationVip till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetApplicationVipResponse | null (null in case of 404 response)
     */
    forApplicationVip(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getApplicationVip(request), response => targetStates.includes(response.applicationVip.lifecycleState), targetStates.includes(models.ApplicationVip.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forAutonomousContainerDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousContainerDatabaseResponse | null (null in case of 404 response)
     */
    forAutonomousContainerDatabase(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getAutonomousContainerDatabase(request), response => targetStates.includes(response.autonomousContainerDatabase.lifecycleState), targetStates.includes(models.AutonomousContainerDatabase.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forAutonomousContainerDatabaseDataguardAssociation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousContainerDatabaseDataguardAssociationResponse | null (null in case of 404 response)
     */
    forAutonomousContainerDatabaseDataguardAssociation(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getAutonomousContainerDatabaseDataguardAssociation(request), response => targetStates.includes(response.autonomousContainerDatabaseDataguardAssociation.lifecycleState), targetStates.includes(models.AutonomousContainerDatabaseDataguardAssociation.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forAutonomousDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousDatabaseResponse | null (null in case of 404 response)
     */
    forAutonomousDatabase(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getAutonomousDatabase(request), response => targetStates.includes(response.autonomousDatabase.lifecycleState), targetStates.includes(models.AutonomousDatabase.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forAutonomousDatabaseBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousDatabaseBackupResponse | null (null in case of 404 response)
     */
    forAutonomousDatabaseBackup(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getAutonomousDatabaseBackup(request), response => targetStates.includes(response.autonomousDatabaseBackup.lifecycleState), targetStates.includes(models.AutonomousDatabaseBackup.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forAutonomousDatabaseDataguardAssociation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousDatabaseDataguardAssociationResponse | null (null in case of 404 response)
     */
    forAutonomousDatabaseDataguardAssociation(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getAutonomousDatabaseDataguardAssociation(request), response => targetStates.includes(response.autonomousDatabaseDataguardAssociation.lifecycleState), targetStates.includes(models.AutonomousDatabaseDataguardAssociation.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forAutonomousDatabaseSoftwareImage till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousDatabaseSoftwareImageResponse | null (null in case of 404 response)
     */
    forAutonomousDatabaseSoftwareImage(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getAutonomousDatabaseSoftwareImage(request), response => targetStates.includes(response.autonomousDatabaseSoftwareImage.lifecycleState), targetStates.includes(models.AutonomousDatabaseSoftwareImage.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forAutonomousDatabaseWallet till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousDatabaseWalletResponse
     */
    forAutonomousDatabaseWallet(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getAutonomousDatabaseWallet(request), response => targetStates.includes(response.autonomousDatabaseWallet.lifecycleState));
        });
    }
    /**
     * Waits forAutonomousExadataInfrastructure till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousExadataInfrastructureResponse | null (null in case of 404 response)
     */
    forAutonomousExadataInfrastructure(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getAutonomousExadataInfrastructure(request), response => targetStates.includes(response.autonomousExadataInfrastructure.lifecycleState), targetStates.includes(models.AutonomousExadataInfrastructure.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forAutonomousPatch till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousPatchResponse
     */
    forAutonomousPatch(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getAutonomousPatch(request), response => targetStates.includes(response.autonomousPatch.lifecycleState));
        });
    }
    /**
     * Waits forAutonomousVirtualMachine till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousVirtualMachineResponse | null (null in case of 404 response)
     */
    forAutonomousVirtualMachine(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getAutonomousVirtualMachine(request), response => targetStates.includes(response.autonomousVirtualMachine.lifecycleState), targetStates.includes(models.AutonomousVirtualMachine.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forAutonomousVmCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAutonomousVmClusterResponse | null (null in case of 404 response)
     */
    forAutonomousVmCluster(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getAutonomousVmCluster(request), response => targetStates.includes(response.autonomousVmCluster.lifecycleState), targetStates.includes(models.AutonomousVmCluster.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forBackup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBackupResponse | null (null in case of 404 response)
     */
    forBackup(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getBackup(request), response => targetStates.includes(response.backup.lifecycleState), targetStates.includes(models.Backup.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forBackupDestination till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetBackupDestinationResponse | null (null in case of 404 response)
     */
    forBackupDestination(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getBackupDestination(request), response => targetStates.includes(response.backupDestination.lifecycleState), targetStates.includes(models.BackupDestination.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forCloudAutonomousVmCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCloudAutonomousVmClusterResponse | null (null in case of 404 response)
     */
    forCloudAutonomousVmCluster(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getCloudAutonomousVmCluster(request), response => targetStates.includes(response.cloudAutonomousVmCluster.lifecycleState), targetStates.includes(models.CloudAutonomousVmCluster.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forCloudExadataInfrastructure till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCloudExadataInfrastructureResponse | null (null in case of 404 response)
     */
    forCloudExadataInfrastructure(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getCloudExadataInfrastructure(request), response => targetStates.includes(response.cloudExadataInfrastructure.lifecycleState), targetStates.includes(models.CloudExadataInfrastructure.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forCloudVmCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCloudVmClusterResponse | null (null in case of 404 response)
     */
    forCloudVmCluster(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getCloudVmCluster(request), response => targetStates.includes(response.cloudVmCluster.lifecycleState), targetStates.includes(models.CloudVmCluster.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forConsoleConnection till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConsoleConnectionResponse | null (null in case of 404 response)
     */
    forConsoleConnection(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getConsoleConnection(request), response => targetStates.includes(response.consoleConnection.lifecycleState), targetStates.includes(models.ConsoleConnection.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forConsoleHistory till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConsoleHistoryResponse | null (null in case of 404 response)
     */
    forConsoleHistory(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getConsoleHistory(request), response => targetStates.includes(response.consoleHistory.lifecycleState), targetStates.includes(models.ConsoleHistory.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forDataGuardAssociation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataGuardAssociationResponse | null (null in case of 404 response)
     */
    forDataGuardAssociation(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDataGuardAssociation(request), response => targetStates.includes(response.dataGuardAssociation.lifecycleState), targetStates.includes(models.DataGuardAssociation.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDatabaseResponse | null (null in case of 404 response)
     */
    forDatabase(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDatabase(request), response => targetStates.includes(response.database.lifecycleState), targetStates.includes(models.Database.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forDatabaseSoftwareImage till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDatabaseSoftwareImageResponse | null (null in case of 404 response)
     */
    forDatabaseSoftwareImage(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDatabaseSoftwareImage(request), response => targetStates.includes(response.databaseSoftwareImage.lifecycleState), targetStates.includes(models.DatabaseSoftwareImage.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forDatabaseUpgradeHistoryEntry till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDatabaseUpgradeHistoryEntryResponse
     */
    forDatabaseUpgradeHistoryEntry(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getDatabaseUpgradeHistoryEntry(request), response => targetStates.includes(response.databaseUpgradeHistoryEntry.lifecycleState));
        });
    }
    /**
     * Waits forDbHome till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDbHomeResponse | null (null in case of 404 response)
     */
    forDbHome(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDbHome(request), response => targetStates.includes(response.dbHome.lifecycleState), targetStates.includes(models.DbHome.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forDbNode till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDbNodeResponse | null (null in case of 404 response)
     */
    forDbNode(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDbNode(request), response => targetStates.includes(response.dbNode.lifecycleState), targetStates.includes(models.DbNode.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forDbServer till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDbServerResponse | null (null in case of 404 response)
     */
    forDbServer(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDbServer(request), response => targetStates.includes(response.dbServer.lifecycleState), targetStates.includes(models.DbServer.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forDbSystem till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDbSystemResponse | null (null in case of 404 response)
     */
    forDbSystem(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDbSystem(request), response => targetStates.includes(response.dbSystem.lifecycleState), targetStates.includes(models.DbSystem.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forDbSystemUpgradeHistoryEntry till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDbSystemUpgradeHistoryEntryResponse
     */
    forDbSystemUpgradeHistoryEntry(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getDbSystemUpgradeHistoryEntry(request), response => targetStates.includes(response.dbSystemUpgradeHistoryEntry.lifecycleState));
        });
    }
    /**
     * Waits forExadataInfrastructure till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExadataInfrastructureResponse | null (null in case of 404 response)
     */
    forExadataInfrastructure(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExadataInfrastructure(request), response => targetStates.includes(response.exadataInfrastructure.lifecycleState), targetStates.includes(models.ExadataInfrastructure.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forExadataIormConfig till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExadataIormConfigResponse
     */
    forExadataIormConfig(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getExadataIormConfig(request), response => targetStates.includes(response.exadataIormConfig.lifecycleState));
        });
    }
    /**
     * Waits forExternalContainerDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalContainerDatabaseResponse | null (null in case of 404 response)
     */
    forExternalContainerDatabase(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalContainerDatabase(request), response => targetStates.includes(response.externalContainerDatabase.lifecycleState), targetStates.includes(models.ExternalContainerDatabase.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forExternalDatabaseConnector till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalDatabaseConnectorResponse | null (null in case of 404 response)
     */
    forExternalDatabaseConnector(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalDatabaseConnector(request), response => targetStates.includes(response.externalDatabaseConnector.lifecycleState), targetStates.includes(models.ExternalDatabaseConnector.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forExternalNonContainerDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalNonContainerDatabaseResponse | null (null in case of 404 response)
     */
    forExternalNonContainerDatabase(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalNonContainerDatabase(request), response => targetStates.includes(response.externalNonContainerDatabase.lifecycleState), targetStates.includes(models.ExternalNonContainerDatabase.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forExternalPluggableDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetExternalPluggableDatabaseResponse | null (null in case of 404 response)
     */
    forExternalPluggableDatabase(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getExternalPluggableDatabase(request), response => targetStates.includes(response.externalPluggableDatabase.lifecycleState), targetStates.includes(models.ExternalPluggableDatabase.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forKeyStore till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetKeyStoreResponse | null (null in case of 404 response)
     */
    forKeyStore(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getKeyStore(request), response => targetStates.includes(response.keyStore.lifecycleState), targetStates.includes(models.KeyStore.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forMaintenanceRun till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetMaintenanceRunResponse | null (null in case of 404 response)
     */
    forMaintenanceRun(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getMaintenanceRun(request), response => targetStates.includes(response.maintenanceRun.lifecycleState), targetStates.includes(models.MaintenanceRun.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forOneoffPatch till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetOneoffPatchResponse | null (null in case of 404 response)
     */
    forOneoffPatch(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getOneoffPatch(request), response => targetStates.includes(response.oneoffPatch.lifecycleState), targetStates.includes(models.OneoffPatch.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forPdbConversionHistoryEntry till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPdbConversionHistoryEntryResponse
     */
    forPdbConversionHistoryEntry(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getPdbConversionHistoryEntry(request), response => targetStates.includes(response.pdbConversionHistoryEntry.lifecycleState));
        });
    }
    /**
     * Waits forPluggableDatabase till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPluggableDatabaseResponse | null (null in case of 404 response)
     */
    forPluggableDatabase(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getPluggableDatabase(request), response => targetStates.includes(response.pluggableDatabase.lifecycleState), targetStates.includes(models.PluggableDatabase.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVmCluster till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVmClusterResponse | null (null in case of 404 response)
     */
    forVmCluster(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getVmCluster(request), response => targetStates.includes(response.vmCluster.lifecycleState), targetStates.includes(models.VmCluster.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVmClusterNetwork till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVmClusterNetworkResponse | null (null in case of 404 response)
     */
    forVmClusterNetwork(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getVmClusterNetwork(request), response => targetStates.includes(response.vmClusterNetwork.lifecycleState), targetStates.includes(models.VmClusterNetwork.LifecycleState.Terminated));
        });
    }
    /**
     * Waits forVmClusterUpdate till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVmClusterUpdateResponse
     */
    forVmClusterUpdate(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getVmClusterUpdate(request), response => targetStates.includes(response.vmClusterUpdate.lifecycleState));
        });
    }
    /**
     * Waits forVmClusterUpdateHistoryEntry till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetVmClusterUpdateHistoryEntryResponse
     */
    forVmClusterUpdateHistoryEntry(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getVmClusterUpdateHistoryEntry(request), response => targetStates.includes(response.vmClusterUpdateHistoryEntry.lifecycleState));
        });
    }
    /**
     * Waits forLaunchAutonomousExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns LaunchAutonomousExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forLaunchAutonomousExadataInfrastructure(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const launchAutonomousExadataInfrastructureResponse = yield this.client.launchAutonomousExadataInfrastructure(request);
            if (launchAutonomousExadataInfrastructureResponse.opcWorkRequestId === undefined)
                return {
                    response: launchAutonomousExadataInfrastructureResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, launchAutonomousExadataInfrastructureResponse.opcWorkRequestId);
            return {
                response: launchAutonomousExadataInfrastructureResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forLaunchDbSystem
     *
     * @param request the request to send
     * @return response returns LaunchDbSystemResponse, GetWorkRequestResponse tuple
     */
    forLaunchDbSystem(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const launchDbSystemResponse = yield this.client.launchDbSystem(request);
            if (launchDbSystemResponse.opcWorkRequestId === undefined)
                return { response: launchDbSystemResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, launchDbSystemResponse.opcWorkRequestId);
            return { response: launchDbSystemResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forLocalClonePluggableDatabase
     *
     * @param request the request to send
     * @return response returns LocalClonePluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forLocalClonePluggableDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const localClonePluggableDatabaseResponse = yield this.client.localClonePluggableDatabase(request);
            if (localClonePluggableDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: localClonePluggableDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, localClonePluggableDatabaseResponse.opcWorkRequestId);
            return {
                response: localClonePluggableDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forMigrateExadataDbSystemResourceModel
     *
     * @param request the request to send
     * @return response returns MigrateExadataDbSystemResourceModelResponse, GetWorkRequestResponse tuple
     */
    forMigrateExadataDbSystemResourceModel(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const migrateExadataDbSystemResourceModelResponse = yield this.client.migrateExadataDbSystemResourceModel(request);
            if (migrateExadataDbSystemResourceModelResponse.opcWorkRequestId === undefined)
                return {
                    response: migrateExadataDbSystemResourceModelResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, migrateExadataDbSystemResourceModelResponse.opcWorkRequestId);
            return {
                response: migrateExadataDbSystemResourceModelResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forMigrateVaultKey
     *
     * @param request the request to send
     * @return response returns MigrateVaultKeyResponse, GetWorkRequestResponse tuple
     */
    forMigrateVaultKey(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const migrateVaultKeyResponse = yield this.client.migrateVaultKey(request);
            if (migrateVaultKeyResponse.opcWorkRequestId === undefined)
                return { response: migrateVaultKeyResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, migrateVaultKeyResponse.opcWorkRequestId);
            return { response: migrateVaultKeyResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forModifyDatabaseManagement
     *
     * @param request the request to send
     * @return response returns ModifyDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forModifyDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const modifyDatabaseManagementResponse = yield this.client.modifyDatabaseManagement(request);
            if (modifyDatabaseManagementResponse.opcWorkRequestId === undefined)
                return { response: modifyDatabaseManagementResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, modifyDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: modifyDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forModifyPluggableDatabaseManagement
     *
     * @param request the request to send
     * @return response returns ModifyPluggableDatabaseManagementResponse, GetWorkRequestResponse tuple
     */
    forModifyPluggableDatabaseManagement(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const modifyPluggableDatabaseManagementResponse = yield this.client.modifyPluggableDatabaseManagement(request);
            if (modifyPluggableDatabaseManagementResponse.opcWorkRequestId === undefined)
                return {
                    response: modifyPluggableDatabaseManagementResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, modifyPluggableDatabaseManagementResponse.opcWorkRequestId);
            return {
                response: modifyPluggableDatabaseManagementResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRefreshPluggableDatabase
     *
     * @param request the request to send
     * @return response returns RefreshPluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forRefreshPluggableDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const refreshPluggableDatabaseResponse = yield this.client.refreshPluggableDatabase(request);
            if (refreshPluggableDatabaseResponse.opcWorkRequestId === undefined)
                return { response: refreshPluggableDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, refreshPluggableDatabaseResponse.opcWorkRequestId);
            return {
                response: refreshPluggableDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRegisterAutonomousDatabaseDataSafe
     *
     * @param request the request to send
     * @return response returns RegisterAutonomousDatabaseDataSafeResponse, GetWorkRequestResponse tuple
     */
    forRegisterAutonomousDatabaseDataSafe(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const registerAutonomousDatabaseDataSafeResponse = yield this.client.registerAutonomousDatabaseDataSafe(request);
            if (registerAutonomousDatabaseDataSafeResponse.opcWorkRequestId === undefined)
                return {
                    response: registerAutonomousDatabaseDataSafeResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, registerAutonomousDatabaseDataSafeResponse.opcWorkRequestId);
            return {
                response: registerAutonomousDatabaseDataSafeResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forReinstateAutonomousContainerDatabaseDataguardAssociation
     *
     * @param request the request to send
     * @return response returns ReinstateAutonomousContainerDatabaseDataguardAssociationResponse, GetWorkRequestResponse tuple
     */
    forReinstateAutonomousContainerDatabaseDataguardAssociation(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const reinstateAutonomousContainerDatabaseDataguardAssociationResponse = yield this.client.reinstateAutonomousContainerDatabaseDataguardAssociation(request);
            if (reinstateAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId ===
                undefined)
                return {
                    response: reinstateAutonomousContainerDatabaseDataguardAssociationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, reinstateAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId);
            return {
                response: reinstateAutonomousContainerDatabaseDataguardAssociationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forReinstateDataGuardAssociation
     *
     * @param request the request to send
     * @return response returns ReinstateDataGuardAssociationResponse, GetWorkRequestResponse tuple
     */
    forReinstateDataGuardAssociation(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const reinstateDataGuardAssociationResponse = yield this.client.reinstateDataGuardAssociation(request);
            if (reinstateDataGuardAssociationResponse.opcWorkRequestId === undefined)
                return {
                    response: reinstateDataGuardAssociationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, reinstateDataGuardAssociationResponse.opcWorkRequestId);
            return {
                response: reinstateDataGuardAssociationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRemoteClonePluggableDatabase
     *
     * @param request the request to send
     * @return response returns RemoteClonePluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forRemoteClonePluggableDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const remoteClonePluggableDatabaseResponse = yield this.client.remoteClonePluggableDatabase(request);
            if (remoteClonePluggableDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: remoteClonePluggableDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, remoteClonePluggableDatabaseResponse.opcWorkRequestId);
            return {
                response: remoteClonePluggableDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRemoveVirtualMachineFromCloudVmCluster
     *
     * @param request the request to send
     * @return response returns RemoveVirtualMachineFromCloudVmClusterResponse, GetWorkRequestResponse tuple
     */
    forRemoveVirtualMachineFromCloudVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeVirtualMachineFromCloudVmClusterResponse = yield this.client.removeVirtualMachineFromCloudVmCluster(request);
            if (removeVirtualMachineFromCloudVmClusterResponse.opcWorkRequestId === undefined)
                return {
                    response: removeVirtualMachineFromCloudVmClusterResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, removeVirtualMachineFromCloudVmClusterResponse.opcWorkRequestId);
            return {
                response: removeVirtualMachineFromCloudVmClusterResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRemoveVirtualMachineFromVmCluster
     *
     * @param request the request to send
     * @return response returns RemoveVirtualMachineFromVmClusterResponse, GetWorkRequestResponse tuple
     */
    forRemoveVirtualMachineFromVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const removeVirtualMachineFromVmClusterResponse = yield this.client.removeVirtualMachineFromVmCluster(request);
            if (removeVirtualMachineFromVmClusterResponse.opcWorkRequestId === undefined)
                return {
                    response: removeVirtualMachineFromVmClusterResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, removeVirtualMachineFromVmClusterResponse.opcWorkRequestId);
            return {
                response: removeVirtualMachineFromVmClusterResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forResizeVmClusterNetwork
     *
     * @param request the request to send
     * @return response returns ResizeVmClusterNetworkResponse, GetWorkRequestResponse tuple
     */
    forResizeVmClusterNetwork(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const resizeVmClusterNetworkResponse = yield this.client.resizeVmClusterNetwork(request);
            if (resizeVmClusterNetworkResponse.opcWorkRequestId === undefined)
                return { response: resizeVmClusterNetworkResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, resizeVmClusterNetworkResponse.opcWorkRequestId);
            return {
                response: resizeVmClusterNetworkResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRestartAutonomousContainerDatabase
     *
     * @param request the request to send
     * @return response returns RestartAutonomousContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forRestartAutonomousContainerDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const restartAutonomousContainerDatabaseResponse = yield this.client.restartAutonomousContainerDatabase(request);
            if (restartAutonomousContainerDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: restartAutonomousContainerDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, restartAutonomousContainerDatabaseResponse.opcWorkRequestId);
            return {
                response: restartAutonomousContainerDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRestartAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns RestartAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forRestartAutonomousDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const restartAutonomousDatabaseResponse = yield this.client.restartAutonomousDatabase(request);
            if (restartAutonomousDatabaseResponse.opcWorkRequestId === undefined)
                return { response: restartAutonomousDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, restartAutonomousDatabaseResponse.opcWorkRequestId);
            return {
                response: restartAutonomousDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRestoreAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns RestoreAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forRestoreAutonomousDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const restoreAutonomousDatabaseResponse = yield this.client.restoreAutonomousDatabase(request);
            if (restoreAutonomousDatabaseResponse.opcWorkRequestId === undefined)
                return { response: restoreAutonomousDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, restoreAutonomousDatabaseResponse.opcWorkRequestId);
            return {
                response: restoreAutonomousDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRestoreDatabase
     *
     * @param request the request to send
     * @return response returns RestoreDatabaseResponse, GetWorkRequestResponse tuple
     */
    forRestoreDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const restoreDatabaseResponse = yield this.client.restoreDatabase(request);
            if (restoreDatabaseResponse.opcWorkRequestId === undefined)
                return { response: restoreDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, restoreDatabaseResponse.opcWorkRequestId);
            return { response: restoreDatabaseResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forRotateAutonomousContainerDatabaseEncryptionKey
     *
     * @param request the request to send
     * @return response returns RotateAutonomousContainerDatabaseEncryptionKeyResponse, GetWorkRequestResponse tuple
     */
    forRotateAutonomousContainerDatabaseEncryptionKey(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rotateAutonomousContainerDatabaseEncryptionKeyResponse = yield this.client.rotateAutonomousContainerDatabaseEncryptionKey(request);
            if (rotateAutonomousContainerDatabaseEncryptionKeyResponse.opcWorkRequestId === undefined)
                return {
                    response: rotateAutonomousContainerDatabaseEncryptionKeyResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, rotateAutonomousContainerDatabaseEncryptionKeyResponse.opcWorkRequestId);
            return {
                response: rotateAutonomousContainerDatabaseEncryptionKeyResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRotateAutonomousDatabaseEncryptionKey
     *
     * @param request the request to send
     * @return response returns RotateAutonomousDatabaseEncryptionKeyResponse, GetWorkRequestResponse tuple
     */
    forRotateAutonomousDatabaseEncryptionKey(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rotateAutonomousDatabaseEncryptionKeyResponse = yield this.client.rotateAutonomousDatabaseEncryptionKey(request);
            if (rotateAutonomousDatabaseEncryptionKeyResponse.opcWorkRequestId === undefined)
                return {
                    response: rotateAutonomousDatabaseEncryptionKeyResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, rotateAutonomousDatabaseEncryptionKeyResponse.opcWorkRequestId);
            return {
                response: rotateAutonomousDatabaseEncryptionKeyResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRotateAutonomousVmClusterOrdsCerts
     *
     * @param request the request to send
     * @return response returns RotateAutonomousVmClusterOrdsCertsResponse, GetWorkRequestResponse tuple
     */
    forRotateAutonomousVmClusterOrdsCerts(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rotateAutonomousVmClusterOrdsCertsResponse = yield this.client.rotateAutonomousVmClusterOrdsCerts(request);
            if (rotateAutonomousVmClusterOrdsCertsResponse.opcWorkRequestId === undefined)
                return {
                    response: rotateAutonomousVmClusterOrdsCertsResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, rotateAutonomousVmClusterOrdsCertsResponse.opcWorkRequestId);
            return {
                response: rotateAutonomousVmClusterOrdsCertsResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRotateAutonomousVmClusterSslCerts
     *
     * @param request the request to send
     * @return response returns RotateAutonomousVmClusterSslCertsResponse, GetWorkRequestResponse tuple
     */
    forRotateAutonomousVmClusterSslCerts(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rotateAutonomousVmClusterSslCertsResponse = yield this.client.rotateAutonomousVmClusterSslCerts(request);
            if (rotateAutonomousVmClusterSslCertsResponse.opcWorkRequestId === undefined)
                return {
                    response: rotateAutonomousVmClusterSslCertsResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, rotateAutonomousVmClusterSslCertsResponse.opcWorkRequestId);
            return {
                response: rotateAutonomousVmClusterSslCertsResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRotateCloudAutonomousVmClusterOrdsCerts
     *
     * @param request the request to send
     * @return response returns RotateCloudAutonomousVmClusterOrdsCertsResponse, GetWorkRequestResponse tuple
     */
    forRotateCloudAutonomousVmClusterOrdsCerts(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rotateCloudAutonomousVmClusterOrdsCertsResponse = yield this.client.rotateCloudAutonomousVmClusterOrdsCerts(request);
            if (rotateCloudAutonomousVmClusterOrdsCertsResponse.opcWorkRequestId === undefined)
                return {
                    response: rotateCloudAutonomousVmClusterOrdsCertsResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, rotateCloudAutonomousVmClusterOrdsCertsResponse.opcWorkRequestId);
            return {
                response: rotateCloudAutonomousVmClusterOrdsCertsResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRotateCloudAutonomousVmClusterSslCerts
     *
     * @param request the request to send
     * @return response returns RotateCloudAutonomousVmClusterSslCertsResponse, GetWorkRequestResponse tuple
     */
    forRotateCloudAutonomousVmClusterSslCerts(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rotateCloudAutonomousVmClusterSslCertsResponse = yield this.client.rotateCloudAutonomousVmClusterSslCerts(request);
            if (rotateCloudAutonomousVmClusterSslCertsResponse.opcWorkRequestId === undefined)
                return {
                    response: rotateCloudAutonomousVmClusterSslCertsResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, rotateCloudAutonomousVmClusterSslCertsResponse.opcWorkRequestId);
            return {
                response: rotateCloudAutonomousVmClusterSslCertsResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRotateOrdsCerts
     *
     * @param request the request to send
     * @return response returns RotateOrdsCertsResponse, GetWorkRequestResponse tuple
     */
    forRotateOrdsCerts(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rotateOrdsCertsResponse = yield this.client.rotateOrdsCerts(request);
            if (rotateOrdsCertsResponse.opcWorkRequestId === undefined)
                return { response: rotateOrdsCertsResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, rotateOrdsCertsResponse.opcWorkRequestId);
            return { response: rotateOrdsCertsResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forRotatePluggableDatabaseEncryptionKey
     *
     * @param request the request to send
     * @return response returns RotatePluggableDatabaseEncryptionKeyResponse, GetWorkRequestResponse tuple
     */
    forRotatePluggableDatabaseEncryptionKey(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rotatePluggableDatabaseEncryptionKeyResponse = yield this.client.rotatePluggableDatabaseEncryptionKey(request);
            if (rotatePluggableDatabaseEncryptionKeyResponse.opcWorkRequestId === undefined)
                return {
                    response: rotatePluggableDatabaseEncryptionKeyResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, rotatePluggableDatabaseEncryptionKeyResponse.opcWorkRequestId);
            return {
                response: rotatePluggableDatabaseEncryptionKeyResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forRotateSslCerts
     *
     * @param request the request to send
     * @return response returns RotateSslCertsResponse, GetWorkRequestResponse tuple
     */
    forRotateSslCerts(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rotateSslCertsResponse = yield this.client.rotateSslCerts(request);
            if (rotateSslCertsResponse.opcWorkRequestId === undefined)
                return { response: rotateSslCertsResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, rotateSslCertsResponse.opcWorkRequestId);
            return { response: rotateSslCertsResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forRotateVaultKey
     *
     * @param request the request to send
     * @return response returns RotateVaultKeyResponse, GetWorkRequestResponse tuple
     */
    forRotateVaultKey(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const rotateVaultKeyResponse = yield this.client.rotateVaultKey(request);
            if (rotateVaultKeyResponse.opcWorkRequestId === undefined)
                return { response: rotateVaultKeyResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, rotateVaultKeyResponse.opcWorkRequestId);
            return { response: rotateVaultKeyResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forScanExternalContainerDatabasePluggableDatabases
     *
     * @param request the request to send
     * @return response returns ScanExternalContainerDatabasePluggableDatabasesResponse, GetWorkRequestResponse tuple
     */
    forScanExternalContainerDatabasePluggableDatabases(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const scanExternalContainerDatabasePluggableDatabasesResponse = yield this.client.scanExternalContainerDatabasePluggableDatabases(request);
            if (scanExternalContainerDatabasePluggableDatabasesResponse.opcWorkRequestId === undefined)
                return {
                    response: scanExternalContainerDatabasePluggableDatabasesResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, scanExternalContainerDatabasePluggableDatabasesResponse.opcWorkRequestId);
            return {
                response: scanExternalContainerDatabasePluggableDatabasesResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forShrinkAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns ShrinkAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forShrinkAutonomousDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const shrinkAutonomousDatabaseResponse = yield this.client.shrinkAutonomousDatabase(request);
            if (shrinkAutonomousDatabaseResponse.opcWorkRequestId === undefined)
                return { response: shrinkAutonomousDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, shrinkAutonomousDatabaseResponse.opcWorkRequestId);
            return {
                response: shrinkAutonomousDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forStartAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns StartAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forStartAutonomousDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const startAutonomousDatabaseResponse = yield this.client.startAutonomousDatabase(request);
            if (startAutonomousDatabaseResponse.opcWorkRequestId === undefined)
                return { response: startAutonomousDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, startAutonomousDatabaseResponse.opcWorkRequestId);
            return {
                response: startAutonomousDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forStartPluggableDatabase
     *
     * @param request the request to send
     * @return response returns StartPluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forStartPluggableDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const startPluggableDatabaseResponse = yield this.client.startPluggableDatabase(request);
            if (startPluggableDatabaseResponse.opcWorkRequestId === undefined)
                return { response: startPluggableDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, startPluggableDatabaseResponse.opcWorkRequestId);
            return {
                response: startPluggableDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forStopAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns StopAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forStopAutonomousDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const stopAutonomousDatabaseResponse = yield this.client.stopAutonomousDatabase(request);
            if (stopAutonomousDatabaseResponse.opcWorkRequestId === undefined)
                return { response: stopAutonomousDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, stopAutonomousDatabaseResponse.opcWorkRequestId);
            return {
                response: stopAutonomousDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forStopPluggableDatabase
     *
     * @param request the request to send
     * @return response returns StopPluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forStopPluggableDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const stopPluggableDatabaseResponse = yield this.client.stopPluggableDatabase(request);
            if (stopPluggableDatabaseResponse.opcWorkRequestId === undefined)
                return { response: stopPluggableDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, stopPluggableDatabaseResponse.opcWorkRequestId);
            return { response: stopPluggableDatabaseResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forSwitchoverAutonomousContainerDatabaseDataguardAssociation
     *
     * @param request the request to send
     * @return response returns SwitchoverAutonomousContainerDatabaseDataguardAssociationResponse, GetWorkRequestResponse tuple
     */
    forSwitchoverAutonomousContainerDatabaseDataguardAssociation(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const switchoverAutonomousContainerDatabaseDataguardAssociationResponse = yield this.client.switchoverAutonomousContainerDatabaseDataguardAssociation(request);
            if (switchoverAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId ===
                undefined)
                return {
                    response: switchoverAutonomousContainerDatabaseDataguardAssociationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, switchoverAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId);
            return {
                response: switchoverAutonomousContainerDatabaseDataguardAssociationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forSwitchoverAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns SwitchoverAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forSwitchoverAutonomousDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const switchoverAutonomousDatabaseResponse = yield this.client.switchoverAutonomousDatabase(request);
            if (switchoverAutonomousDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: switchoverAutonomousDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, switchoverAutonomousDatabaseResponse.opcWorkRequestId);
            return {
                response: switchoverAutonomousDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forSwitchoverDataGuardAssociation
     *
     * @param request the request to send
     * @return response returns SwitchoverDataGuardAssociationResponse, GetWorkRequestResponse tuple
     */
    forSwitchoverDataGuardAssociation(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const switchoverDataGuardAssociationResponse = yield this.client.switchoverDataGuardAssociation(request);
            if (switchoverDataGuardAssociationResponse.opcWorkRequestId === undefined)
                return {
                    response: switchoverDataGuardAssociationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, switchoverDataGuardAssociationResponse.opcWorkRequestId);
            return {
                response: switchoverDataGuardAssociationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forTerminateAutonomousContainerDatabase
     *
     * @param request the request to send
     * @return response returns TerminateAutonomousContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forTerminateAutonomousContainerDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const terminateAutonomousContainerDatabaseResponse = yield this.client.terminateAutonomousContainerDatabase(request);
            if (terminateAutonomousContainerDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: terminateAutonomousContainerDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, terminateAutonomousContainerDatabaseResponse.opcWorkRequestId);
            return {
                response: terminateAutonomousContainerDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forTerminateAutonomousExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns TerminateAutonomousExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forTerminateAutonomousExadataInfrastructure(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const terminateAutonomousExadataInfrastructureResponse = yield this.client.terminateAutonomousExadataInfrastructure(request);
            if (terminateAutonomousExadataInfrastructureResponse.opcWorkRequestId === undefined)
                return {
                    response: terminateAutonomousExadataInfrastructureResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, terminateAutonomousExadataInfrastructureResponse.opcWorkRequestId);
            return {
                response: terminateAutonomousExadataInfrastructureResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forTerminateDbSystem
     *
     * @param request the request to send
     * @return response returns TerminateDbSystemResponse, GetWorkRequestResponse tuple
     */
    forTerminateDbSystem(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const terminateDbSystemResponse = yield this.client.terminateDbSystem(request);
            if (terminateDbSystemResponse.opcWorkRequestId === undefined)
                return { response: terminateDbSystemResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, terminateDbSystemResponse.opcWorkRequestId);
            return { response: terminateDbSystemResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateAutonomousContainerDatabase
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousContainerDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateAutonomousContainerDatabaseResponse = yield this.client.updateAutonomousContainerDatabase(request);
            if (updateAutonomousContainerDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: updateAutonomousContainerDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateAutonomousContainerDatabaseResponse.opcWorkRequestId);
            return {
                response: updateAutonomousContainerDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateAutonomousContainerDatabaseDataguardAssociation
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousContainerDatabaseDataguardAssociationResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousContainerDatabaseDataguardAssociation(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateAutonomousContainerDatabaseDataguardAssociationResponse = yield this.client.updateAutonomousContainerDatabaseDataguardAssociation(request);
            if (updateAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId === undefined)
                return {
                    response: updateAutonomousContainerDatabaseDataguardAssociationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId);
            return {
                response: updateAutonomousContainerDatabaseDataguardAssociationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateAutonomousDatabase
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateAutonomousDatabaseResponse = yield this.client.updateAutonomousDatabase(request);
            if (updateAutonomousDatabaseResponse.opcWorkRequestId === undefined)
                return { response: updateAutonomousDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateAutonomousDatabaseResponse.opcWorkRequestId);
            return {
                response: updateAutonomousDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateAutonomousDatabaseBackup
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousDatabaseBackupResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousDatabaseBackup(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateAutonomousDatabaseBackupResponse = yield this.client.updateAutonomousDatabaseBackup(request);
            if (updateAutonomousDatabaseBackupResponse.opcWorkRequestId === undefined)
                return {
                    response: updateAutonomousDatabaseBackupResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateAutonomousDatabaseBackupResponse.opcWorkRequestId);
            return {
                response: updateAutonomousDatabaseBackupResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateAutonomousDatabaseRegionalWallet
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousDatabaseRegionalWalletResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousDatabaseRegionalWallet(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateAutonomousDatabaseRegionalWalletResponse = yield this.client.updateAutonomousDatabaseRegionalWallet(request);
            if (updateAutonomousDatabaseRegionalWalletResponse.opcWorkRequestId === undefined)
                return {
                    response: updateAutonomousDatabaseRegionalWalletResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateAutonomousDatabaseRegionalWalletResponse.opcWorkRequestId);
            return {
                response: updateAutonomousDatabaseRegionalWalletResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateAutonomousDatabaseWallet
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousDatabaseWalletResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousDatabaseWallet(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateAutonomousDatabaseWalletResponse = yield this.client.updateAutonomousDatabaseWallet(request);
            if (updateAutonomousDatabaseWalletResponse.opcWorkRequestId === undefined)
                return {
                    response: updateAutonomousDatabaseWalletResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateAutonomousDatabaseWalletResponse.opcWorkRequestId);
            return {
                response: updateAutonomousDatabaseWalletResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateAutonomousExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousExadataInfrastructure(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateAutonomousExadataInfrastructureResponse = yield this.client.updateAutonomousExadataInfrastructure(request);
            if (updateAutonomousExadataInfrastructureResponse.opcWorkRequestId === undefined)
                return {
                    response: updateAutonomousExadataInfrastructureResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateAutonomousExadataInfrastructureResponse.opcWorkRequestId);
            return {
                response: updateAutonomousExadataInfrastructureResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateAutonomousVmCluster
     *
     * @param request the request to send
     * @return response returns UpdateAutonomousVmClusterResponse, GetWorkRequestResponse tuple
     */
    forUpdateAutonomousVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateAutonomousVmClusterResponse = yield this.client.updateAutonomousVmCluster(request);
            if (updateAutonomousVmClusterResponse.opcWorkRequestId === undefined)
                return { response: updateAutonomousVmClusterResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateAutonomousVmClusterResponse.opcWorkRequestId);
            return {
                response: updateAutonomousVmClusterResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateCloudAutonomousVmCluster
     *
     * @param request the request to send
     * @return response returns UpdateCloudAutonomousVmClusterResponse, GetWorkRequestResponse tuple
     */
    forUpdateCloudAutonomousVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateCloudAutonomousVmClusterResponse = yield this.client.updateCloudAutonomousVmCluster(request);
            if (updateCloudAutonomousVmClusterResponse.opcWorkRequestId === undefined)
                return {
                    response: updateCloudAutonomousVmClusterResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateCloudAutonomousVmClusterResponse.opcWorkRequestId);
            return {
                response: updateCloudAutonomousVmClusterResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateCloudExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns UpdateCloudExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forUpdateCloudExadataInfrastructure(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateCloudExadataInfrastructureResponse = yield this.client.updateCloudExadataInfrastructure(request);
            if (updateCloudExadataInfrastructureResponse.opcWorkRequestId === undefined)
                return {
                    response: updateCloudExadataInfrastructureResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateCloudExadataInfrastructureResponse.opcWorkRequestId);
            return {
                response: updateCloudExadataInfrastructureResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateCloudVmCluster
     *
     * @param request the request to send
     * @return response returns UpdateCloudVmClusterResponse, GetWorkRequestResponse tuple
     */
    forUpdateCloudVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateCloudVmClusterResponse = yield this.client.updateCloudVmCluster(request);
            if (updateCloudVmClusterResponse.opcWorkRequestId === undefined)
                return { response: updateCloudVmClusterResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateCloudVmClusterResponse.opcWorkRequestId);
            return { response: updateCloudVmClusterResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateCloudVmClusterIormConfig
     *
     * @param request the request to send
     * @return response returns UpdateCloudVmClusterIormConfigResponse, GetWorkRequestResponse tuple
     */
    forUpdateCloudVmClusterIormConfig(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateCloudVmClusterIormConfigResponse = yield this.client.updateCloudVmClusterIormConfig(request);
            if (updateCloudVmClusterIormConfigResponse.opcWorkRequestId === undefined)
                return {
                    response: updateCloudVmClusterIormConfigResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateCloudVmClusterIormConfigResponse.opcWorkRequestId);
            return {
                response: updateCloudVmClusterIormConfigResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateConsoleConnection
     *
     * @param request the request to send
     * @return response returns UpdateConsoleConnectionResponse, GetWorkRequestResponse tuple
     */
    forUpdateConsoleConnection(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateConsoleConnectionResponse = yield this.client.updateConsoleConnection(request);
            if (updateConsoleConnectionResponse.opcWorkRequestId === undefined)
                return { response: updateConsoleConnectionResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateConsoleConnectionResponse.opcWorkRequestId);
            return {
                response: updateConsoleConnectionResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateConsoleHistory
     *
     * @param request the request to send
     * @return response returns UpdateConsoleHistoryResponse, GetWorkRequestResponse tuple
     */
    forUpdateConsoleHistory(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateConsoleHistoryResponse = yield this.client.updateConsoleHistory(request);
            if (updateConsoleHistoryResponse.opcWorkRequestId === undefined)
                return { response: updateConsoleHistoryResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateConsoleHistoryResponse.opcWorkRequestId);
            return { response: updateConsoleHistoryResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateDataGuardAssociation
     *
     * @param request the request to send
     * @return response returns UpdateDataGuardAssociationResponse, GetWorkRequestResponse tuple
     */
    forUpdateDataGuardAssociation(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateDataGuardAssociationResponse = yield this.client.updateDataGuardAssociation(request);
            if (updateDataGuardAssociationResponse.opcWorkRequestId === undefined)
                return {
                    response: updateDataGuardAssociationResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateDataGuardAssociationResponse.opcWorkRequestId);
            return {
                response: updateDataGuardAssociationResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateDatabase
     *
     * @param request the request to send
     * @return response returns UpdateDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdateDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateDatabaseResponse = yield this.client.updateDatabase(request);
            if (updateDatabaseResponse.opcWorkRequestId === undefined)
                return { response: updateDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateDatabaseResponse.opcWorkRequestId);
            return { response: updateDatabaseResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateDbHome
     *
     * @param request the request to send
     * @return response returns UpdateDbHomeResponse, GetWorkRequestResponse tuple
     */
    forUpdateDbHome(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateDbHomeResponse = yield this.client.updateDbHome(request);
            if (updateDbHomeResponse.opcWorkRequestId === undefined)
                return { response: updateDbHomeResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateDbHomeResponse.opcWorkRequestId);
            return { response: updateDbHomeResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateDbNode
     *
     * @param request the request to send
     * @return response returns UpdateDbNodeResponse, GetWorkRequestResponse tuple
     */
    forUpdateDbNode(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateDbNodeResponse = yield this.client.updateDbNode(request);
            if (updateDbNodeResponse.opcWorkRequestId === undefined)
                return { response: updateDbNodeResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateDbNodeResponse.opcWorkRequestId);
            return { response: updateDbNodeResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateDbSystem
     *
     * @param request the request to send
     * @return response returns UpdateDbSystemResponse, GetWorkRequestResponse tuple
     */
    forUpdateDbSystem(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateDbSystemResponse = yield this.client.updateDbSystem(request);
            if (updateDbSystemResponse.opcWorkRequestId === undefined)
                return { response: updateDbSystemResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateDbSystemResponse.opcWorkRequestId);
            return { response: updateDbSystemResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateExadataInfrastructure
     *
     * @param request the request to send
     * @return response returns UpdateExadataInfrastructureResponse, GetWorkRequestResponse tuple
     */
    forUpdateExadataInfrastructure(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateExadataInfrastructureResponse = yield this.client.updateExadataInfrastructure(request);
            if (updateExadataInfrastructureResponse.opcWorkRequestId === undefined)
                return {
                    response: updateExadataInfrastructureResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateExadataInfrastructureResponse.opcWorkRequestId);
            return {
                response: updateExadataInfrastructureResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateExadataIormConfig
     *
     * @param request the request to send
     * @return response returns UpdateExadataIormConfigResponse, GetWorkRequestResponse tuple
     */
    forUpdateExadataIormConfig(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateExadataIormConfigResponse = yield this.client.updateExadataIormConfig(request);
            if (updateExadataIormConfigResponse.opcWorkRequestId === undefined)
                return { response: updateExadataIormConfigResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateExadataIormConfigResponse.opcWorkRequestId);
            return {
                response: updateExadataIormConfigResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateExternalContainerDatabase
     *
     * @param request the request to send
     * @return response returns UpdateExternalContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdateExternalContainerDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateExternalContainerDatabaseResponse = yield this.client.updateExternalContainerDatabase(request);
            if (updateExternalContainerDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: updateExternalContainerDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateExternalContainerDatabaseResponse.opcWorkRequestId);
            return {
                response: updateExternalContainerDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateExternalDatabaseConnector
     *
     * @param request the request to send
     * @return response returns UpdateExternalDatabaseConnectorResponse, GetWorkRequestResponse tuple
     */
    forUpdateExternalDatabaseConnector(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateExternalDatabaseConnectorResponse = yield this.client.updateExternalDatabaseConnector(request);
            if (updateExternalDatabaseConnectorResponse.opcWorkRequestId === undefined)
                return {
                    response: updateExternalDatabaseConnectorResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateExternalDatabaseConnectorResponse.opcWorkRequestId);
            return {
                response: updateExternalDatabaseConnectorResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateExternalNonContainerDatabase
     *
     * @param request the request to send
     * @return response returns UpdateExternalNonContainerDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdateExternalNonContainerDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateExternalNonContainerDatabaseResponse = yield this.client.updateExternalNonContainerDatabase(request);
            if (updateExternalNonContainerDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: updateExternalNonContainerDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateExternalNonContainerDatabaseResponse.opcWorkRequestId);
            return {
                response: updateExternalNonContainerDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateExternalPluggableDatabase
     *
     * @param request the request to send
     * @return response returns UpdateExternalPluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdateExternalPluggableDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateExternalPluggableDatabaseResponse = yield this.client.updateExternalPluggableDatabase(request);
            if (updateExternalPluggableDatabaseResponse.opcWorkRequestId === undefined)
                return {
                    response: updateExternalPluggableDatabaseResponse,
                    workRequestResponse: undefined
                };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateExternalPluggableDatabaseResponse.opcWorkRequestId);
            return {
                response: updateExternalPluggableDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdatePluggableDatabase
     *
     * @param request the request to send
     * @return response returns UpdatePluggableDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpdatePluggableDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updatePluggableDatabaseResponse = yield this.client.updatePluggableDatabase(request);
            if (updatePluggableDatabaseResponse.opcWorkRequestId === undefined)
                return { response: updatePluggableDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updatePluggableDatabaseResponse.opcWorkRequestId);
            return {
                response: updatePluggableDatabaseResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpdateVmCluster
     *
     * @param request the request to send
     * @return response returns UpdateVmClusterResponse, GetWorkRequestResponse tuple
     */
    forUpdateVmCluster(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateVmClusterResponse = yield this.client.updateVmCluster(request);
            if (updateVmClusterResponse.opcWorkRequestId === undefined)
                return { response: updateVmClusterResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateVmClusterResponse.opcWorkRequestId);
            return { response: updateVmClusterResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpdateVmClusterNetwork
     *
     * @param request the request to send
     * @return response returns UpdateVmClusterNetworkResponse, GetWorkRequestResponse tuple
     */
    forUpdateVmClusterNetwork(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const updateVmClusterNetworkResponse = yield this.client.updateVmClusterNetwork(request);
            if (updateVmClusterNetworkResponse.opcWorkRequestId === undefined)
                return { response: updateVmClusterNetworkResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, updateVmClusterNetworkResponse.opcWorkRequestId);
            return {
                response: updateVmClusterNetworkResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
    /**
     * Waits forUpgradeDatabase
     *
     * @param request the request to send
     * @return response returns UpgradeDatabaseResponse, GetWorkRequestResponse tuple
     */
    forUpgradeDatabase(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const upgradeDatabaseResponse = yield this.client.upgradeDatabase(request);
            if (upgradeDatabaseResponse.opcWorkRequestId === undefined)
                return { response: upgradeDatabaseResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, upgradeDatabaseResponse.opcWorkRequestId);
            return { response: upgradeDatabaseResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forUpgradeDbSystem
     *
     * @param request the request to send
     * @return response returns UpgradeDbSystemResponse, GetWorkRequestResponse tuple
     */
    forUpgradeDbSystem(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const upgradeDbSystemResponse = yield this.client.upgradeDbSystem(request);
            if (upgradeDbSystemResponse.opcWorkRequestId === undefined)
                return { response: upgradeDbSystemResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, upgradeDbSystemResponse.opcWorkRequestId);
            return { response: upgradeDbSystemResponse, workRequestResponse: getWorkRequestResponse };
        });
    }
    /**
     * Waits forValidateVmClusterNetwork
     *
     * @param request the request to send
     * @return response returns ValidateVmClusterNetworkResponse, GetWorkRequestResponse tuple
     */
    forValidateVmClusterNetwork(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const validateVmClusterNetworkResponse = yield this.client.validateVmClusterNetwork(request);
            if (validateVmClusterNetworkResponse.opcWorkRequestId === undefined)
                return { response: validateVmClusterNetworkResponse, workRequestResponse: undefined };
            const getWorkRequestResponse = yield oci_workrequests_1.waitForWorkRequest(this.config, this.workRequestClient, validateVmClusterNetworkResponse.opcWorkRequestId);
            return {
                response: validateVmClusterNetworkResponse,
                workRequestResponse: getWorkRequestResponse
            };
        });
    }
}
exports.DatabaseWaiter = DatabaseWaiter;
//# sourceMappingURL=database-waiter.js.map