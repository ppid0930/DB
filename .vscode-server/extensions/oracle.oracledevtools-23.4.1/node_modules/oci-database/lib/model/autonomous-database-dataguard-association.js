"use strict";
/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutonomousDatabaseDataguardAssociation = void 0;
var AutonomousDatabaseDataguardAssociation;
(function (AutonomousDatabaseDataguardAssociation) {
    let Role;
    (function (Role) {
        Role["Primary"] = "PRIMARY";
        Role["Standby"] = "STANDBY";
        Role["DisabledStandby"] = "DISABLED_STANDBY";
        Role["BackupCopy"] = "BACKUP_COPY";
        Role["SnapshotStandby"] = "SNAPSHOT_STANDBY";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Role["UnknownValue"] = "UNKNOWN_VALUE";
    })(Role = AutonomousDatabaseDataguardAssociation.Role || (AutonomousDatabaseDataguardAssociation.Role = {}));
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Provisioning"] = "PROVISIONING";
        LifecycleState["Available"] = "AVAILABLE";
        LifecycleState["RoleChangeInProgress"] = "ROLE_CHANGE_IN_PROGRESS";
        LifecycleState["Terminating"] = "TERMINATING";
        LifecycleState["Terminated"] = "TERMINATED";
        LifecycleState["Failed"] = "FAILED";
        LifecycleState["Unavailable"] = "UNAVAILABLE";
        LifecycleState["Updating"] = "UPDATING";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = AutonomousDatabaseDataguardAssociation.LifecycleState || (AutonomousDatabaseDataguardAssociation.LifecycleState = {}));
    let PeerRole;
    (function (PeerRole) {
        PeerRole["Primary"] = "PRIMARY";
        PeerRole["Standby"] = "STANDBY";
        PeerRole["DisabledStandby"] = "DISABLED_STANDBY";
        PeerRole["BackupCopy"] = "BACKUP_COPY";
        PeerRole["SnapshotStandby"] = "SNAPSHOT_STANDBY";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        PeerRole["UnknownValue"] = "UNKNOWN_VALUE";
    })(PeerRole = AutonomousDatabaseDataguardAssociation.PeerRole || (AutonomousDatabaseDataguardAssociation.PeerRole = {}));
    let PeerAutonomousDatabaseLifeCycleState;
    (function (PeerAutonomousDatabaseLifeCycleState) {
        PeerAutonomousDatabaseLifeCycleState["Provisioning"] = "PROVISIONING";
        PeerAutonomousDatabaseLifeCycleState["Available"] = "AVAILABLE";
        PeerAutonomousDatabaseLifeCycleState["Stopping"] = "STOPPING";
        PeerAutonomousDatabaseLifeCycleState["Stopped"] = "STOPPED";
        PeerAutonomousDatabaseLifeCycleState["Starting"] = "STARTING";
        PeerAutonomousDatabaseLifeCycleState["Terminating"] = "TERMINATING";
        PeerAutonomousDatabaseLifeCycleState["Terminated"] = "TERMINATED";
        PeerAutonomousDatabaseLifeCycleState["Unavailable"] = "UNAVAILABLE";
        PeerAutonomousDatabaseLifeCycleState["RestoreInProgress"] = "RESTORE_IN_PROGRESS";
        PeerAutonomousDatabaseLifeCycleState["RestoreFailed"] = "RESTORE_FAILED";
        PeerAutonomousDatabaseLifeCycleState["BackupInProgress"] = "BACKUP_IN_PROGRESS";
        PeerAutonomousDatabaseLifeCycleState["ScaleInProgress"] = "SCALE_IN_PROGRESS";
        PeerAutonomousDatabaseLifeCycleState["AvailableNeedsAttention"] = "AVAILABLE_NEEDS_ATTENTION";
        PeerAutonomousDatabaseLifeCycleState["Updating"] = "UPDATING";
        PeerAutonomousDatabaseLifeCycleState["MaintenanceInProgress"] = "MAINTENANCE_IN_PROGRESS";
        PeerAutonomousDatabaseLifeCycleState["Restarting"] = "RESTARTING";
        PeerAutonomousDatabaseLifeCycleState["Recreating"] = "RECREATING";
        PeerAutonomousDatabaseLifeCycleState["RoleChangeInProgress"] = "ROLE_CHANGE_IN_PROGRESS";
        PeerAutonomousDatabaseLifeCycleState["Upgrading"] = "UPGRADING";
        PeerAutonomousDatabaseLifeCycleState["Inaccessible"] = "INACCESSIBLE";
        PeerAutonomousDatabaseLifeCycleState["Standby"] = "STANDBY";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        PeerAutonomousDatabaseLifeCycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(PeerAutonomousDatabaseLifeCycleState = AutonomousDatabaseDataguardAssociation.PeerAutonomousDatabaseLifeCycleState || (AutonomousDatabaseDataguardAssociation.PeerAutonomousDatabaseLifeCycleState = {}));
    let ProtectionMode;
    (function (ProtectionMode) {
        ProtectionMode["MaximumAvailability"] = "MAXIMUM_AVAILABILITY";
        ProtectionMode["MaximumPerformance"] = "MAXIMUM_PERFORMANCE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        ProtectionMode["UnknownValue"] = "UNKNOWN_VALUE";
    })(ProtectionMode = AutonomousDatabaseDataguardAssociation.ProtectionMode || (AutonomousDatabaseDataguardAssociation.ProtectionMode = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    AutonomousDatabaseDataguardAssociation.getJsonObj = getJsonObj;
    function getDeserializedJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    AutonomousDatabaseDataguardAssociation.getDeserializedJsonObj = getDeserializedJsonObj;
})(AutonomousDatabaseDataguardAssociation = exports.AutonomousDatabaseDataguardAssociation || (exports.AutonomousDatabaseDataguardAssociation = {}));
//# sourceMappingURL=autonomous-database-dataguard-association.js.map